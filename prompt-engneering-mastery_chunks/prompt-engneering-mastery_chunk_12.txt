xample with the application of several prompt engineering
techniques. We ask for names in the style of Steve Jobs, state that we want a
comma-separated list, and supply examples of the task done well.
Input:
Brainstorm a list of product names for a shoe that fi
foot size, in the style of Steve Jobs.
Return the results as a comma-separated list, in this
Product description: A shoe that fits any foot size
Product names: [list of 3 product names]
## Examples
Product description: A refrigerator that dispenses be
Product names: iBarFridge, iFridgeBeer, iDrinkBeerFri
Product description: A watch that can tell accurate t
space
Product names: iNaut, iSpace, iTime
Product description: A home milkshake maker
Product names: iShake, iSmoothie, iShake MiniOutput:
Product description: A shoe that fits any foot size
Product names: iFitFoot, iPerfectFit, iShoeSize
While no prompt is ever perfect, this prompt is optimized to reliably deliver
solid product names in the right format. The user of your product name
generator can choose somebody other than Steve Jobs to get the types of
names they like, they can change the response format if needed, and the
output of this prompt can become the input of another . Finally , you could
periodically update the examples you use in the prompt based on user
feedback, making your system smarter over time.
Overview of the Five Principles of
Prompting
The process for optimizing this prompt follows the Five Principles of
Prompting , which we will dissect using this example in the remainder of
this chapter , and recall throughout the book. They map exactly to the five
issues we raised when discussing the naive text prompt. You’ll find
references back to these principles throughout the rest of the book to help
you connect the dots to how they’re used in practice. The Five Principles of
Prompting are as follows:Give Dir ection
Describe the desired style in detail, or reference a relevant persona
Specify Format
Define what rules to follow , and the requ