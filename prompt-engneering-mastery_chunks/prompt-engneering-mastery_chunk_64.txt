 schema
schema = """
- item: Apple Slices
  quantity: 5
  unit: pieces
- item: Milk
  quantity: 1
  unit: gallon
- item: Bread  quantity: 2
  unit: loaves
- item: Eggs
  quantity: 1
  unit: dozen
"""
Import the yaml  module and create a custom parser function called
validate_ response  that allows you to easily determine whether an
LLM output is valid:
import yaml
def validate_response (response , schema):
    # Parse the schema
    schema_parsed  = yaml.safe_load (schema)
    maximum_quantity  = 10
    # Check if the response is a list
    if not isinstance (response , list):
        raise InvalidResponse ("Response is not a list
    # Check if each item in the list is a dictionary
    for item in response :
        if not isinstance (item, dict):
            raise InvalidItemType ('''Item is not a di        # Check if each dictionary has the keys "item
        if not all(key in item for key in ("item", "q
            raise InvalidItemKeys ("Item does not have
        # Check if the values associated with each ke
        if not isinstance (item["item"], str):
            raise InvalidItemName ("Item name is not a
        if not isinstance (item["quantity" ], int):
            raise InvalidItemQuantity ("Item quantity 
        if not isinstance (item["unit"], str):
            raise InvalidItemUnit ("Item unit is not a
        # Check if the values associated with each ke
        if item["item"] not in [x["item"] for x in sc
            raise InvalidItemName ("Item name is not i
        if item["quantity" ] >  maximum_quantity :
            raise InvalidItemQuantity (f'''Item quanti
            {maximum_quantity }''')
        if item["unit"] not in ["pieces" , "dozen"]:
            raise InvalidItemUnit ("Item unit is not p
To test these edge cases, following youâ€™ll find several mocked LLM
responses:
# Fake responses
fake_response_1  = """
- item: Apple Slices  quantity: 5
  unit: pieces
- item: Eggs
  quantity: 2
  unit: dozen
"""
fake_response_2  = """
# Updated y