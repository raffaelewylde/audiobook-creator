d randomized to avoid favoring one
prompt over another .
Input:import ipywidgets  as widgets
from IPython.display  import display
import pandas as pd
# load the responses.csv file
df = pd.read_csv ("responses.csv" )
# Shuffle the dataframe
df = df.sample(frac=1).reset_index (drop=True)
# df is your dataframe and 'response' is the column w
# text you want to test
response_index  = 0
# add a new column to store feedback
df['feedback' ] = pd.Series(dtype='str')
def on_button_clicked (b):
    global response_index
    #  convert thumbs up / down to 1 / 0
    user_feedback  = 1 if b.description  == "\U0001F44D
    # update the feedback column
    df.at[response_index , 'feedback' ] = user_feedback
    response_index  += 1
    if response_index  < len(df):
        update_response ()
    else:        # save the feedback to a CSV file
        df.to_csv("results.csv" , index=False)
        print("A/B testing completed. Here's the resu
        # Calculate score and num rows for each varia
        summary_df  = df.groupby('variant' ).agg(
            count=('feedback' , 'count'),
            score=('feedback' , 'mean')).reset_index ()
        print(summary_df )
def update_response ():
    new_response  = df.iloc[response_index ]['response'
    if pd.notna(new_response ):
        new_response  = "<p>" + new_response  + "</p>"
    else:
        new_response  = "<p>No response</p>"
    response .value = new_response
    count_label .value = f"Response: {response_index  +
    count_label .value += f"/{len(df)}"
response  = widgets.HTML()
count_label  = widgets.Label()
update_response ()
thumbs_up_button  = widgets.Button(description ='\U0001
thumbs_up_button .on_click (on_button_clicked )thumbs_down_button  = widgets.Button(
    description ='\U0001F44E ')
thumbs_down_button .on_click (on_button_clicked )
button_box  = widgets.HBox([thumbs_down_button ,
thumbs_up_button ])
display(response , button_box , count_label )
The output is shown in Figure 1-12 :
Figure 1-12. Thumbs-up/thu