aml list
- item: Apple Slices
  quantity: 5
  unit: pieces
"""
fake_response_3  = """Unmatched"""
Finally , now you can:
Use yaml.safe_load(response)  to safely parse the .yml schema
Call the validate_response  function for each LLM response to test
it against custom .yml validation logic
# Parse the fake responses
response_1_parsed  = yaml.safe_load (fake_response_1 )
response_2_parsed  = yaml.safe_load (fake_response_2 )
response_3_parsed  = yaml.safe_load (fake_response_3 )# Validate the responses against the schema
try:
    validate_response (response_1_parsed , schema)
    print("Response 1 is valid" )
except Exception  as e:
    print("Response 1 is invalid:" , str(e))
try:
    validate_response (response_2_parsed , schema)
    print("Response 2 is valid" )
except Exception  as e:
    print("Response 2 is invalid:" , str(e))
try:
    validate_response (response_3_parsed , schema)
    print("Response 3 is valid" )
except Exception  as e:
    print("Response 3 is invalid:" , str(e))
Response  1 is valid
Response  2 is valid
Response  3 is invalid: Response  is not a list
Diverse Format Generation withChatGPT
ChatGPT  is not only capable of generating .json  or .yml files but can also
support many other data formats. For example, it can aid you in creating a
mermaid diagram or generating a mock .csv document. Its versatility
stretches to even generating code, conversations, and scripts.
Letâ€™s explore in detail how ChatGPT  can produce diverse formatted
content. Mermaid is a markdown-like scripting language for generating
charts, diagrams, and other visualizations.
Input:
Create a flowchart diagram in mermaid syntax showing 
process that starts with "Choose food" and ends with 
Include steps for "Add food to cart" and "Confirm car
Output:
graph TD
    ChooseFood[Choose Food] --> AddToCart[Add to Cart
    AddToCart --> ConfirmCart[Confirm Cart]
    ConfirmCart --> PayForMeal[Pay for Meal]This output, when input to a mermaid diagram renderer , will create a
precise 