of the button clicked
was the thumbs-up button ( \U0001F44D ; 
), and sets
user_feedback  as 1, or if it was the thumbs-down button
(\U0001F44E  
), it sets user_feedback  as 0.
b. Then it updates the feedback  column of the dataframe at the
current response_index  with user_feedback .
c. After that, it increments response_index  to move to the next
response.
d. If response_index  is still less than the total number of responses
(i.e., the length of the dataframe), it calls the function
update_response() .
e. If there are no more responses, it saves the dataframe to a new CSV
file results.csv , then prints a message, and also prints a summary of
the results by variant, showing the count of feedback received and the
average score (mean) for each variant.
7. The function update_response()  fetches the next response from the
dataframe, wraps it in paragraph HTML  tags (if it’ s not null), updates theresponse  widget to display the new response, and updates the
count_label  widget to reflect the current response number and total
number of responses.
8. Two widgets, response  (an HTML  widget) and count_label  (a
Label widget), are instantiated. The update_response()  function is
then called to initialize these widgets with the first response and the
appropriate label.
9. Two more widgets, thumbs_up_button  and
thumbs_down_button  (both Button widgets), are created with
thumbs-up and thumbs-down emoji as their descriptions, respectively .
Both buttons are configured to call the on_button_clicked()
function when clicked.
10. The two buttons are grouped into a horizontal box ( button_box )
using the HBox  function.
11. Finally , the response , button_box , and count_label  widgets
are displayed to the user using the display()  function from the
IPython.display  module.
A simple rating system such as this one can be useful in judging prompt
quality and encountering edge cases. Usually in less than 10 test runs of a
prompt you uncover a deviation, which you otherwise wouldn’