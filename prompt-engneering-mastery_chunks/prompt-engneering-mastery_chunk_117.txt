 Pydantic  library in
Python. Pydantic is a data validation library that provides a way to validate
incoming data using Python type annotations. This means that Pydantic
allows you to create schemas for your data and automatically validates and
parses input data according to those schemas.
Input:
from langchain_core.prompts.chat  import (
    ChatPromptTemplate ,
    SystemMessagePromptTemplate ,
)from langchain_openai.chat_models  import ChatOpenAI
from langchain.output_parsers  import PydanticOutputPa
from pydantic.v1  import BaseModel , Field
from typing import List
temperature  = 0.0
class BusinessName (BaseModel ):
    name: str = Field(description ="The name of the bu
    rating_score : float = Field(description ='''The ra
    business. 0 is the worst, 10 is the best.''' )
class BusinessNames (BaseModel ):
    names: List[BusinessName ] = Field(description ='''
    of busines names''' )
# Set up a parser + inject instructions into the prom
parser = PydanticOutputParser (pydantic_object =Busines
principles  = """
- The name must be easy to remember.
- Use the {industry}  industry and Company context to 
- The name must be easy to pronounce.
- You must only return the name without any other tex
- Avoid returning full stops, \n, or any other charac
- The maximum length of the name must be 10 character
"""# Chat Model Output Parser:
model = ChatOpenAI ()
template  = """Generate five business names for a new 
{industry}  industry.
You must follow the following principles: {principles
{format_instructions}
"""
system_message_prompt  = SystemMessagePromptTemplate .f
chat_prompt  = ChatPromptTemplate .from_messages ([syste
# Creating the LCEL chain:
prompt_and_model  = chat_prompt  | model
result = prompt_and_model .invoke(
    {
        "principles" : principles ,
        "industry" : "Data Science" ,
        "format_instructions" : parser.get_format_inst
    }
)
# The output parser, parses the LLM response into a P
print(parser.parse(result.content))
Output:
names=[