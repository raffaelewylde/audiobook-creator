rated. This isn’ t
a big deal most of the time, because most prompts are one-of fs and typed
into ChatGPT  or Midjourney . However , when you’re incorporating AI toolsinto production software, occasional flips in format can cause all kinds of
errors.
Just like when working with a human, you can avoid wasted ef fort by
specifying up front the format you expect the response to be in. For text
generation models, it can often be helpful to output JSON instead of a
simple ordered list because that’ s the universal format for API responses,
which can make it simpler to parse and spot errors, as well as to use to
render the front-end HTML  of an application. YAML  is also another
popular choice because it enforces a parseable structure while still being
simple and human-readable.
In the original prompt you gave direction through both the examples
provided, and the colon at the end of the prompt indicated it should
complete the list inline. To swap the format to JSON, you need to update
both and leave the JSON uncompleted, so GPT -4 knows to complete it.
Input:
Return a comma-separated list of product names in JSO
"A pair of shoes that can fit any foot size.".
Return only JSON.
Examples:
[{
"Product description": "A home milksh"Product names": ["HomeShaker", "Fit 
"QuickShake", "Shake Maker"]
},
{
"Product description": "A watch that 
accurate time in space.",
"Product names": ["AstroTime", "Space
"Orbit-Accurate", "EliptoTime"]}
]
Output:
[
{
"Product description": "A pair of sho
fit any foot size.",
"Product names": ["FlexFit Footwear",
"Adapt-a-Shoe", "Universal Walker"]
}
]
The output we get back is the completed JSON containing the product
names. This can then be parsed and used programmatically , in an
application or local script. It’ s also easy from this point to check if there’ s
an error in the formatting using a JSON parser like Python’ s standard jsonlibrary , because broken JSON will result in a parsing error , which can act as
a trigger to retry the prompt or 