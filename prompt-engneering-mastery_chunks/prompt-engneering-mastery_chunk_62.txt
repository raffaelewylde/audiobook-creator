L  is designed to be human-readable, with a simpler syntax and
structure compared to JSON. This makes it easier for you to create,
read, and edit prompts, especially when dealing with complex or
nested structures.
Comments
Unlike JSON, YAML  supports comments, allowing you to add
annotations or explanations to the prompts directly in the file. This
can be extremely helpful when working in a team or when revisiting
the prompts after some time, as it allows for better understanding and
collaboration.
Input:
- Below you'll find the current yaml schema.
- You can update the quantities based on a User Query
- Filter the User Query based on the schema below, if
there are no items left then return `"No Items"`.
- If there is a partial match, then return only the i
within the schema below:
# schema:- item: Apple Slices
  quantity: 5
  unit: pieces
- item: Milk
  quantity: 1
  unit: gallon
- item: Bread
  quantity: 2
  unit: loaves
- item: Eggs
  quantity: 1
  unit: dozen
User Query: "5 apple slices, and 2 dozen eggs."
Given the schema below, please return only a valid .y
Query.If there's no match, return `"No Items"`. Do no
commentary or explanations.
Output:
- item: Apple Slices
  quantity: 5
  unit: pieces
- item: Eggs  quantity: 2
  unit: dozen
Notice with the preceding example how an LLM is able to infer the correct
.yml format from the User Query  string.
Additionally , you’ve given the LLM an opportunity to either:
Return a valid .yml response
Return a filtered .yml response
If after filtering, there are no .yml items left, then return No Items .
Filtering YAML Payloads
You might decide to use this same prompt for cleaning/filtering a .yml
payload.
First, let’ s focus on a payload that contains both valid and invalid schema
in reference to our desired schema . Apple slices  fit the criteria;
however , Bananas  doesn’ t exist, and you should expect for the User
Query  to be appropriately filtered.
Input:# User Query:
- item: Apple Slices
  quantity: 5
  unit: pieces
- 