ion of data engineering
    b. Importance of data engineering in today’s data
* Efficient Data Management
    a. Definition of data management
    b. How data engineering helps in efficient data m
* Conclusion
    a. Importance of data engineering in the modern b
    b. Future of data engineering and its impact on t
'''
# Regular expression patterns
heading_pattern  = r'\* (.+)'
subheading_pattern  = r'\s+[a-z]\. (.+)'# Extract headings and subheadings
headings  = re.findall(heading_pattern , openai_result )
subheadings  = re.findall(subheading_pattern , openai_r
# Print results
print("Headings: \n")
for heading in headings :
    print(f"* {heading}")
print("\nSubheadings: \n")
for subheading  in subheadings :
    print(f"* {subheading }")
This code will output:
Headings :
- Introduction
- Efficient  Data Management
- Conclusion
Subheadings :
- Explanation  of data engineering
- Importance  of data engineering  in today’s data-driv
- Definition  of data management
- How data engineering  helps in efficient  data manage- Importance  of data engineering  in the modern busine
- Future of data engineering  and its impact on the da
The use of regular expressions allows for ef ficient pattern matching,
making it possible to handle variations in the input text, such as the
presence or absence of leading spaces or tabs. Let’ s explore how these
patterns work:
heading_pattern = r'\* (.+)'
This pattern is designed to extract the main headings and consists of:
\* matches the asterisk (*)  symbol at the beginning of a heading.
The backslash is used to escape the asterisk, as the asterisk has a special
meaning in regular expressions (zero or more occurrences of the
preceding character).
A space character will match after the asterisk.
(.+) : matches one or more characters, and the parentheses create a
capturing group. The . is a wildcard that matches any character except
a newline, and the + is a quantifier that means one or mor e occurrences
of the preceding element (the dot, i