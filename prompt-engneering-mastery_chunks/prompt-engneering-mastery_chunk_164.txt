ically .
Having more dimensions allows the model to capture deeper semantic
meaning and relationships. For example, while a 2-D space might be able to
separate cats from dogs, a 300-D space could capture information about the
differences between breeds, sizes, colors, and other intricate details. The
following code shows how to retrieve embeddings from the OpenAI API.
The code for the following examples is included in the GitHub repository
for this book.
Input:
from openai import OpenAI
client = OpenAI()
# Function to get the vector embedding for a given te
def get_vector_embeddings (text):
    response  = client.embeddings .create(
        input=text,
        model="text-embedding-ada-002"
    )    embeddings  = [r.embedding  for r in response .data]
    return embeddings [0]
get_vector_embeddings ("Your text string goes here" )
Output:
[
-0.006929283495992422,
-0.005336422007530928,
...
-4.547132266452536e-05,
-0.024047505110502243
]
This code uses the OpenAI API to create an embedding for a given input
text using a specific embedding model:
1. from openai import OpenAI  imports the OpenAI library , and
client = OpenAI()  sets up the client. It retrieves your OpenAI API
key from an environment variable OPENAI_API_KEY  in order to
charge the cost of the embeddings to your account. You need to set this
in your environment (usually in an .env file), which can be obtained by
creating an account and visiting https://or eil.ly/apikeys .2. response = client.embeddings.create(...) : This line calls
the create  method of the Embedding  class from the client  from
the OpenAI library . The method takes two ar guments:
1. input : This is where you provide the text string for which you want
to generate an embedding.
2. model : This specifies the embedding model you want to use. In this
case, it is text-embedding-ada-002 , which is a model within the
OpenAI API.
3. embeddings = [r.embedding for r in response.data] :
After the API call, the response  object contains the generate