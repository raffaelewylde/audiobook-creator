distinct applications won’ t
merely interface with a language model via an API, but will also:
Enhance data awar eness
The framework aims to establish a seamless connection between a
language model and external data sources.
Enhance agency
It strives to equip language models with the ability to engage with
and influence their environment.
The LangChain framework illustrated in Figure 4-1  provides a range of
modular abstractions that are essential for working with LLMs, along with a
broad selection of implementations for these abstractions.Figure 4-1. The major modules of the LangChain LLM framework
Each module is designed to be user -friendly and can be efficiently utilized
independently or together . There are currently six common modules within
LangChain:
Model I/OHandles input/output operations related to the model
Retrieval
Focuses on retrieving relevant text for the LLM
Chains
Also known as LangChain runnables , chains enable the construction
of sequences of LLM operations or function calls
Agents
Allows chains to make decisions on which tools to use based on
high-level directives or instructions
Memory
Persists the state of an application between dif ferent runs of a chain
Callbacks
For running additional code on specific events, such as when every
new token is generated
Environment Setup
You can install LangChain on your terminal with either of these commands:
pip install langchain langchain-openaiconda install -c conda-forge langchain langchain-
openai
If you would prefer to install the package requirements for the entire book,
you can use the requir ements.txt  file from the GitHub repository .
It’s recommended to install the packages within a virtual environment:
Create a virtual envir onment
python -m venv venv
Activate the virtual envir onment
source venv/bin/activate
Install the dependencies
pip install -r requirements.txt
LangChain requires integrations with one or more model providers. For
example, to use OpenAI’ s model APIs, you’ll need to install 