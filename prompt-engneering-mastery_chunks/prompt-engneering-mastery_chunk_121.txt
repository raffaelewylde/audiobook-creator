["Purchase" , "Withdrawal" , "Deposit" ,
        "Bill Payment" , "Refund" ], None
    ]
    transaction_category : Union[
        Literal["Food", "Entertainment" , "Transport" ,
        "Utilities" , "Rent", "Other"],
        None,
    ]
# 4. Define the output parser:
output_parser  = PydanticOutputParser (
    pydantic_object =EnrichedTransactionInformation )
# 5. Define a function to try to fix and remove the b
def remove_back_slashes (string):
    # double slash to escape the slash
    cleaned_string  = string.replace("\\", "")
    return cleaned_string
# 6. Create an LCEL chain that fixes the formatting:
chain = prompt | model | StrOutputParser () \
| remove_back_slashes  | output_parser
transaction  = df.iloc[0]["Transaction Description" ]
result = chain.invoke(
        {
            "transaction" : transaction ,            "format_instructions" : \
            output_parser .get_format_instructions (),
        }
    )
# 7. Invoke the chain for the whole dataset:
results = []
for i, row in tqdm(df.iterrows (), total=len(df)):
    transaction  = row["Transaction Description" ]
    try:
        result = chain.invoke(
            {
                "transaction" : transaction ,
                "format_instructions" : \
                output_parser .get_format_instructions
            }
        )
    except:
        result = EnrichedTransactionInformation (
            transaction_type =None,
            transaction_category =None
        )
    results.append(result)
# 8. Add the results to the dataframe, as columns tra
# transaction category:transaction_types  = []
transaction_categories  = []
for result in results:
    transaction_types .append(result.transaction_type )
    transaction_categories .append(
        result.transaction_category )
df["mistral_transaction_type" ] = transaction_types
df["mistral_transaction_category" ] = transaction_cate
df.head()
Output:
Transaction Description transaction_type
transaction_category mistral_transaction_type
mistral_tra