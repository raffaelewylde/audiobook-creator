ve
multiple favorites. When we loop through the dictionary ❶, we use the
variable name languages  to hold each value from the dictionary , because
we know that each value will be a list. Inside the main dictionary loop, we
use another for  loop ❷ to run through each person’ s list of favorite
languages. Now each person can list as many favorite languages as they
like:
Jen's favorite languages are:
    Python
    Rust
Sarah's favorite languages are:
    C
Edward's favorite languages are:
    Rust
    Go
Phil's favorite languages are:    Python
    Haskell
To refine this program even further , you could include an if statement at
the beginning of the dictionary’ s for  loop to see whether each person has
more than one favorite language by examining the value of
len(languages) . If a person has more than one favorite, the output
would stay the same. If the person has only one favorite language, you
could change the wording to reflect that. For example, you could say ,
“Sarah’ s favorite language is C.”
NOTE
You should not nest lists and dictionaries too deeply . If you’r e
nesting items much deeper than what you see in the pr eceding
examples, or if you’r e working with someone else’ s code with
significant levels of nesting, ther e’s most likely a simpler way to
solve the pr oblem.A Dictionary in a Dictionary
You can nest a dictionary inside another dictionary , but your code can get
complicated quickly when you do. For example, if you have several users
for a website, each with a unique username, you can use the usernames as
the keys in a dictionary . You can then store information about each user by
using a dictionary as the value associated with their username. In the
following listing, we store three pieces of information about each user: their
first name, last name, and location. We’ll access this information by looping
through the usernames and the dictionary of information associated with
each username:
many_users.py
users = {
    'aeinstein': {
        'first'