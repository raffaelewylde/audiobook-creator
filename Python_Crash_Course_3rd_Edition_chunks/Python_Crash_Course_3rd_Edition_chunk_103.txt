e sure one or two of the new
usernames are also in the current_users  list.
Loop through the new_users  list to see if each new username has already been used. If it
has, print a message that the person will need to enter a new username. If a username has
not been used, print a message saying that the username is available.
Make sure your comparison is case insensitive. If 'John'  has been used, 'JOHN'  should
not be accepted. (T o do this, youâ€™ll need to make a copy of current_users  containing
the lowercase versions of all existing users.)
5-11. Ordinal Numbers:  Ordinal numbers indicate their position in a list, such as 1st or 2nd.
Most ordinal numbers end in th, except 1, 2, and 3.
Store the numbers 1 through 9 in a list.
Loop through the list.Use an if-elif -else  chain inside the loop to print the proper ordinal ending for each
number . Your output should read "1st 2nd 3rd 4th 5th 6th 7th 8th 9th" , and
each result should be on a separate line.
Styling Your if Statements
In every example in this chapter , youâ€™ve seen good styling habits. The only
recommendation PEP  8 provides for styling conditional tests is to use a
single space around comparison operators, such as ==, >=, and <=. For
example:
if age < 4:
is better than:
if age<4:
Such spacing does not af fect the way Python interprets your code; it just
makes your code easier for you and others to read.TRY IT YOURSELF
5-12. Styling if Statements:  Review the programs you wrote in this chapter , and make sure
you styled your conditional tests appropriately .
5-13. Your Ideas: At this point, youâ€™re a more capable programmer than you were when you
started this book. Now that you have a better sense of how real-world situations are modeled in
programs, you might be thinking of some problems you could solve with your own programs.
Record any new ideas you have about problems you might want to solve as your programming
skills continue to improve. Consider games you might want to write, datasets you might want to
