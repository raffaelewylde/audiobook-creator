from 1 to 20, inclusive.
4-4. One Million:  Make a list of the numbers from one to one million, and then use a for  loop
to print the numbers. (If the output is taking too long, stop it by pressing CTRL-C or by closing
the output window .)
4-5. Summing a Million:  Make a list of the numbers from one to one million, and then use
min()  and max()  to make sure your list actually starts at one and ends at one million. Also,
use the sum()  function to see how quickly Python can add a million numbers.
4-6. Odd Numbers:  Use the third ar gument of the range()  function to make a list of the odd
numbers from 1 to 20. Use a for  loop to print each number .
4-7. Threes: Make a list of the multiples of 3, from 3 to 30. Use a for  loop to print the
numbers in your list.
4-8. Cubes:  A number raised to the third power is called a cube . For example, the cube of 2 is
written as 2**3  in Python. Make a list of the first 10 cubes (that is, the cube of each integer
from 1 through 10), and use a for  loop to print out the value of each cube.
4-9. Cube Compr ehension:  Use a list comprehension to generate a list of the first 10 cubes.Working with Part of a List
In Chapter 3  you learned how to access single elements in a list, and in this
chapter youâ€™ve been learning how to work through all the elements in a list.
You can also work with a specific group of items in a list, called a slice in
Python.
Slicing a List
To make a slice, you specify the index of the first and last elements you
want to work with. As with the range()  function, Python stops one item
before the second index you specify . To output the first three elements in a
list, you would request indices 0 through 3, which would return elements
0, 1, and 2.
The following example involves a list of players on a team:
players.py
players = ['charles', 'martina', 'michael', 'florence
print(players[0:3])
This code prints a slice of the list. The output retains the structure of the list,
and includes the first three players in th