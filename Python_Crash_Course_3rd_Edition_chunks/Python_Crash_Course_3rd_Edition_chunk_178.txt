s served, and then change this
value and print it again.
Add a method called set_number_served()  that lets you set the number of customers that
have been served. Call this method with a new number and print the value again.
Add a method called increment_number_served()  that lets you increment the number of
customers who’ve been served. Call this method with any number you like that could represent
how many customers were served in, say , a day of business.
9-5. Login Attempts:  Add an attribute called login_attempts  to your User  class from
Exercise 9-3 ( page 162 ). Write a method called increment_login_attempts()  that
increments the value of login_attempts  by 1. Write another method called
reset_login_attempts()  that resets the value of login_attempts  to 0.
Make an instance of the User  class and call increment_login_attempts()  several
times. Print the value of login_attempts  to make sure it was incremented properly , and
then call reset_login_attempts() . Print login_attempts  again to make sure it was
reset to 0.
Inheritance
You don’ t always have to start from scratch when writing a class. If the
class you’re writing is a specialized version of another class you wrote, youcan use inheritance . When one class inherits  from another , it takes on the
attributes and methods of the first class. The original class is called the
parent class , and the new class is the child class . The child class can inherit
any or all of the attributes and methods of its parent class, but it’ s also free
to define new attributes and methods of its own.
The __init__() Method for  a Child Class
When you’re writing a new class based on an existing class, you’ll often
want to call the __init__()  method from the parent class. This will
initialize any attributes that were defined in the parent __init__()
method and make them available in the child class.
As an example, let’ s model an electric car . An electric car is just a specific
kind of car , so we can base our new Electri