from .forms import TopicForm
--snip--
def new_topic(request):
    """Add a new topic."""
❶     if request.method != 'POST':
        # No data submitted; create a blank form.
❷         form = TopicForm()
    else:
        # POST data submitted; process data.
❸         form = TopicForm(data=request.POST)
❹         if form.is_valid():
❺             form.save()
❻             return redirect('learning_logs:topics')
    # Display a blank or invalid form.
❼     context = {'form': form}
    return render(request, 'learning_logs/new_topic.hWe import the function redirect , which we’ll use to redirect the user
back to the topics  page after they submit their topic. We also import the
form we just wrote, TopicForm .
GET  and POST  Requests
The two main types of requests you’ll use when building apps are GET  and
POST . You use GET  requests for pages that only read data from the server .
You usually use POST  requests when the user needs to submit information
through a form. We’ll be specifying the POST  method for processing all of
our forms. (A  few other kinds of requests exist, but we won’ t use them in
this project.)
The new_topic()  function takes in the request  object as a parameter .
When the user initially requests this page, their browser will send a GET
request. Once the user has filled out and submitted the form, their browser
will submit a POST  request. Depending on the request, we’ll know whether
the user is requesting a blank form (GET) or asking us to process a
completed form (POST).
We use an if test to determine whether the request method is GET  or
POST  ❶. If the request method isn’ t POST , the request is probably GET , so
we need to return a blank form. (If it’ s another kind of request, it’ s still safe
to return a blank form.) We make an instance of TopicForm  ❷, assign it
to the variable form , and send the form to the template in the contextdictionary ❼. Because we included no ar guments when instantiating
TopicForm , Django creates a blank form tha