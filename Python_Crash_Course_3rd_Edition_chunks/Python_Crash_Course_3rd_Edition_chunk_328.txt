gument,
which specifies the distance between tick marks on the x-axis. We set that
spacing to 1, so that every bar is labeled. When you run dice_visual.py
again, you should see a label on each bar .
Rolling Dice of Differ ent Sizes
Let’s create a six-sided die and a ten-sided die, and see what happens when
we roll them 50,000 times:dice_visual_d6d10.py
import plotly.express as px
from die import Die
# Create a D6 and a D10.
die_1 = Die()
❶ die_2 = Die(10)
# Make some rolls, and store results in a list.
results = []
for roll_num in range(50_000):
    result = die_1.roll() + die_2.roll()
    results.append(result)
# Analyze the results.
--snip--
# Visualize the results.
❷ title = "Results of Rolling a D6 and a D10 50,000 Tim
labels = {'x': 'Result', 'y': 'Frequency of Result'}
--snip--
To make a D10, we pass the ar gument 10 when creating the second Die
instance ❶ and change the first loop to simulate 50,000 rolls instead of1,000. We change the title of the graph as well ❷.
Figure 15-15  shows the resulting chart. Instead of one most likely result,
there are five such results. This happens because there’ s still only one way
to roll the smallest value (1 and 1) and the lar gest value (6 and 10), but the
smaller die limits the number of ways you can generate the middle
numbers. There are six ways to roll a 7, 8, 9, 10, or 1 1, these are the most
common results, and you’re equally likely to roll any one of them.
Figure 15-15 : The r esults of r olling a six-sided die and a ten-sided die 50,000 times
Our ability to use Plotly to model the rolling of dice gives us considerable
freedom in exploring this phenomenon. In just minutes, you can simulate a
tremendous number of rolls using a lar ge variety of dice.Saving Figur es
When you have a figure you like, you can always save the chart as an
HTML  file through your browser . But you can also do so programmatically .
To save your chart as an HTML  file, replace the call to fig.show()  with
a call to fig.write_html() :
fig.wr