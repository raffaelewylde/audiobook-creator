on’ t need additional
information to run, we just define them to have one parameter , self . The
instances we create later will have access to these methods. In other words,
they’ll be able to sit and roll over . For now , sit()  and roll_over()
don’t do much. They simply print a message saying the dog is sitting or
rolling over . But the concept can be extended to realistic situations: if this
class were part of a computer game, these methods would contain code to
make an animated dog sit and roll over . If this class was written to control arobot, these methods would direct movements that cause a robotic dog to sit
and roll over .
Making an Instance fr om a Class
Think of a class as a set of instructions for how to make an instance. The
Dog  class is a set of instructions that tells Python how to make individual
instances representing specific dogs.
Let’s make an instance representing a specific dog:
class Dog:
    --snip--
❶ my_dog = Dog('Willie', 6)
❷ print(f"My dog's name is {my_dog.name}.")
❸ print(f"My dog is {my_dog.age} years old.")
The Dog  class we’re using here is the one we just wrote in the previous
example. Here, we tell Python to create a dog whose name is 'Willie'
and whose age is 6 ❶. When Python reads this line, it calls the
__init__()  method in Dog  with the ar guments 'Willie'  and 6.
The __init__()  method creates an instance representing this particular
dog and sets the name  and age  attributes using the values we provided.
Python then returns an instance representing this dog. We assign thatinstance to the variable my_dog . The naming convention is helpful here;
we can usually assume that a capitalized name like Dog  refers to a class,
and a lowercase name like my_dog  refers to a single instance created from
a class.
Accessing Attributes
To access the attributes of an instance, you use dot notation. We access the
value of my_dog ’s attribute name  ❷ by writing:
my_dog.name
Dot notation is used often in Python. This syntax demonstrates how 