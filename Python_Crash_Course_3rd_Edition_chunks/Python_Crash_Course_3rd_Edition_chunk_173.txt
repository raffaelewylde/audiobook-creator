or the second dog, Python would
still create a separate instance from the Dog  class. You can make as many
instances from one class as you need, as long as you give each instance a
unique variable name or it occupies a unique spot in a list or dictionary .TRY IT YOURSELF
9-1. Restaurant:  Make a class called Restaurant . The __init__()  method for
Restaurant  should store two attributes: a restaurant_name  and a cuisine_type .
Make a method called describe_restaurant()  that prints these two pieces of information,
and a method called open_restaurant()  that prints a message indicating that the restaurant
is open.
Make an instance called restaurant  from your class. Print the two attributes individually ,
and then call both methods.
9-2. Three Restaurants:  Start with your class from Exercise 9-1. Create three dif ferent
instances from the class, and call describe_restaurant()  for each instance.
9-3. Users:  Make a class called User . Create two attributes called first_name  and
last_name , and then create several other attributes that are typically stored in a user profile.
Make a method called describe_user()  that prints a summary of the user ’s information.
Make another method called greet_user()  that prints a personalized greeting to the user .
Create several instances representing dif ferent users, and call both methods for each user .
Working with Classes and Instances
You can use classes to represent many real-world situations. Once you write
a class, you’ll spend most of your time working with instances created from
that class. One of the first tasks you’ll want to do is modify the attributesassociated with a particular instance. You can modify the attributes of an
instance directly or write methods that update attributes in specific ways.
The Car  Class
Let’s write a new class representing a car . Our class will store information
about the kind of car we’re working with, and it will have a method that
summarizes this information:
car.py
class Car:
    """