l add
one alien near the top of the screen and then generate a
whole fleet of aliens. We’ll make the fleet advance sideways
and down, and we’ll get rid of any aliens hit by a bullet.
Finally , we’ll limit the number of ships a player has and end
the game when the player runs out of ships.
As you work through this chapter , you’ll learn more about Pygame and
about managing a lar ge project. You’ll also learn to detect collisions
between game objects, like bullets and aliens. Detecting collisions helps
you define interactions between elements in your games. For example, you
can confine a character inside the walls of a maze or pass a ball between
two characters. We’ll continue to work from a plan that we revisit
occasionally to maintain the focus of our code-writing sessions.
Before we start writing new code to add a fleet of aliens to the screen, let’ s
look at the project and update our plan.Reviewing the Project
When you’re beginning a new phase of development on a lar ge project, it’ s
always a good idea to revisit your plan and clarify what you want to
accomplish with the code you’re about to write. In this chapter , we’ll do the
following:
Add a single alien to the top-left corner of the screen, with appropriate
spacing around it.
Fill the upper portion of the screen with as many aliens as we can fit
horizontally . We’ll then create additional rows of aliens until we have a
full fleet.
Make the fleet move sideways and down until the entire fleet is shot
down, an alien hits the ship, or an alien reaches the ground. If the entire
fleet is shot down, we’ll create a new fleet. If an alien hits the ship or the
ground, we’ll destroy the ship and create a new fleet.
Limit the number of ships the player can use, and end the game when the
player has used up the allotted number of ships.
We’ll refine this plan as we implement features, but this is specific enough
to start writing code.
You should also review your existing code when you begin working on a
new series of fea