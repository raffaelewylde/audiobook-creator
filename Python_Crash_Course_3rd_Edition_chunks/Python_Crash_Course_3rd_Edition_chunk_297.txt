20
In prep_score() , we turn the numerical value stats.score  into a
string ❶ and then pass this string to render() , which creates the image
❷. To display the score clearly onscreen, we pass the screen’ s background
color and the text color to render() .
We’ll position the score in the upper -right corner of the screen and have it
expand to the left as the score increases and the width of the number grows.
To make sure the score always lines up with the right side of the screen, we
create a rect  called score_rect  ❸ and set its right edge 20 pixels
from the right edge of the screen ❹. We then place the top edge 20 pixels
down from the top of the screen ❺.
Then we create a show_score()  method to display the rendered score
image:
scoreboard.py
    def show_score(self):
        """Draw score to the screen."""
        self.screen.blit(self.score_image, self.scoreThis method draws the score image onscreen at the location score_rect
specifies.
Making a Scor eboard
To display the score, we’ll create a Scoreboard  instance in
AlienInvasion . First, let’ s update the import  statements:
alien_invasion.py
--snip--
from game_stats import GameStats
from scoreboard import Scoreboard
--snip--
Next, we make an instance of Scoreboard  in __init__() :
alien_invasion.py
    def __init__(self):
        --snip--
        pygame.display.set_caption("Alien Invasion")
        # Create an instance to store game statistics
        #   and create a scoreboard.
        self.stats = GameStats(self)        self.sb = Scoreboard(self)
        --snip--
Then we draw the scoreboard onscreen in _update_screen() :
alien_invasion.py
    def _update_screen(self):
        --snip--
        self.aliens.draw(self.screen)
        # Draw the score information.
        self.sb.show_score()
        # Draw the play button if the game is inactiv
        --snip--
We call show_score()  just before we draw the Play button.
When you run Alien Invasion  now , a 0 should appear at the top right of the
screen. (At thi