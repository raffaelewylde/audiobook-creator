 value of an alien that
doesn’ t have a point value set:alien_no_points.py
alien_0 = {'color': 'green', 'speed': 'slow'}
print(alien_0['points'])
This results in a traceback, showing a KeyError :
Traceback (most recent call last):
  File "alien_no_points.py", line 2, in <module>
    print(alien_0['points'])
          ~~~~~~~^^^^^^^^^^
KeyError: 'points'
You’ll learn more about how to handle errors like this in general in Chapter
10. For dictionaries specifically , you can use the get()  method to set a
default value that will be returned if the requested key doesn’ t exist.
The get()  method requires a key as a first ar gument. As a second
optional ar gument, you can pass the value to be returned if the key doesn’ t
exist:
alien_0 = {'color': 'green', 'speed': 'slow'}point_value = alien_0.get('points', 'No point value a
print(point_value)
If the key 'points'  exists in the dictionary , you’ll get the corresponding
value. If it doesn’ t, you get the default value. In this case, points  doesn’ t
exist, and we get a clean message instead of an error:
No point value assigned.
If there’ s a chance the key you’re asking for might not exist, consider using
the get()  method instead of the square bracket notation.
NOTE
If you leave out the second ar gument in the call to get()  and the
key doesn’ t exist, Python will r eturn the value None . The special
value None  means “no value exists.” This is not an err or: it’ s a
special value meant to indicate the absence of a value. Y ou’ll see
more uses for None  in Chapter 8 .TRY IT YOURSELF
6-1. Person: Use a dictionary to store information about a person you know . Store their first
name, last name, age, and the city in which they live. You should have keys such as
first_name , last_name , age , and city . Print each piece of information stored in your
dictionary .
6-2. Favorite Numbers:  Use a dictionary to store people’ s favorite numbers. Think of five
names, and use them as keys in your dictionary . Think of a favorite numb