st
2. Index Positions Start at 0, Not 1
3. Using Individual Values from a List
4. Exercise 3-1: Names
5. Exercise 3-2: Gr eetings
6. Exercise 3-3: Y our Own List
2. Modifying, Adding, and Removing Elements
1. Modifying Elements in a List
2. Adding Elements to a List
3. Removing Elements from a List
4. Exercise 3-4: Guest List
5. Exercise 3-5: Changing Guest List
6. Exercise 3-6: Mor e Guests
7. Exercise 3-7: Shrinking Guest List
3. Organizing a List
1. Sorting a List Permanently with the sort() Method
2. Sorting a List Temporarily with the sorted() Function
3. Printing a List in Reverse Order
4. Finding the Length of a List
5. Exercise 3-8: Seeing the W orld
6. Exercise 3-9: Dinner Guests
7. Exercise 3-10: Every Function4. Avoiding Index Errors When Working with Lists
1. Exercise 3-1 1: Intentional Err or
5. Summary
4. CHAPTER 4: WORKING WITH LISTS
1. Looping Through an Entire List
1. A Closer Look at Looping
2. Doing More Work Within a for Loop
3. Doing Something After a for Loop
2. Avoiding Indentation Errors
1. Forgetting to Indent
2. Forgetting to Indent Additional Lines
3. Indenting Unnecessarily
4. Indenting Unnecessarily After the Loop
5. Forgetting the Colon
6. Exercise 4-1: Pizzas
7. Exercise 4-2: Animals
3. Making Numerical Lists
1. Using the range() Function
2. Using range() to Make a List of Numbers
3. Simple Statistics with a List of Numbers
4. List Comprehensions
5. Exercise 4-3: Counting to T wenty
6. Exercise 4-4: One Million
7. Exercise 4-5: Summing a Million8. Exercise 4-6: Odd Numbers
9. Exercise 4-7: Thr ees
10. Exercise 4-8: Cubes
11. Exercise 4-9: Cube Compr ehension
4. Working with Part of a List
1. Slicing a List
2. Looping Through a Slice
3. Copying a List
4. Exercise 4-10: Slices
5. Exercise 4-1 1: My Pizzas, Y our Pizzas
6. Exercise 4-12: Mor e Loops
5. Tuples
1. Defining a Tuple
2. Looping Through All Values in a Tuple
3. Writing Over a Tuple
4. Exercise 4-13: Buffet
6. Styling Your Code
1. The Style Guide
2. Indentation
3. Line Length
4.