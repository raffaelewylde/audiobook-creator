e list:['charles', 'martina', 'michael']
You can generate any subset of a list. For example, if you want the second,
third, and fourth items in a list, you would start the slice at index 1 and
end it at index 4:
players = ['charles', 'martina', 'michael', 'florence
print(players[1:4])
This time the slice starts with 'martina'  and ends with 'florence' :
['martina', 'michael', 'florence']
If you omit the first index in a slice, Python automatically starts your slice
at the beginning of the list:
players = ['charles', 'martina', 'michael', 'florence
print(players[:4])
Without a starting index, Python starts at the beginning of the list:
['charles', 'martina', 'michael', 'florence']A similar syntax works if you want a slice that includes the end of a list. For
example, if you want all items from the third item through the last item, you
can start with index 2 and omit the second index:
players = ['charles', 'martina', 'michael', 'florence
print(players[2:])
Python returns all items from the third item through the end of the list:
['michael', 'florence', 'eli']
This syntax allows you to output all of the elements from any point in your
list to the end, regardless of the length of the list. Recall that a negative
index returns an element a certain distance from the end of a list; therefore,
you can output any slice from the end of a list. For example, if we want to
output the last three players on the roster , we can use the slice
players[-3:] :
players = ['charles', 'martina', 'michael', 'florence
print(players[-3:])
This prints the names of the last three players and will continue to work as
the list of players changes in size.NOTE
You can include a thir d value in the brackets indicating a slice. If a
third value is included, this tells Python how many items to skip
between items in the specified range.
Looping Through a Slice
You can use a slice in a for  loop if you want to loop through a subset of
the elements in a list. In the next example, we loop through the fir