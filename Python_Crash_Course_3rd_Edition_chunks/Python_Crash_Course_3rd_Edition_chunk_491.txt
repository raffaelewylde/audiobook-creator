connections, and allow your server to start
accepting requests.
New hosting platforms and approaches appear on a regular basis; find one
that looks appealing to you, and invest the time to learn that provider ’s
deployment process. Maintain your project long enough so that you get to
know what works well with your provider ’s approach and what doesn’ t. No
hosting platform is going to be perfect; you’ll need to make an ongoingjudgement call about whether the provider you’re currently using is good
enough for your use case.
I’ll of fer one last word of caution about choosing a deployment platform
and an overall approach to deployment. Some people will enthusiastically
steer you toward overly complex deployment approaches and services that
are meant to make your project highly reliable and capable of serving
millions of users simultaneously . Many programmers spend lots of time,
money , and ener gy building out a complex deployment strategy , only to
find that hardly anyone is using their project. Most Django projects can be
set up on a small hosting plan and tuned to serve thousands of requests per
minute. If your project is getting anything less than this level of traf fic, take
the time to configure your deployment to work well on a minimal platform
before investing in infrastructure that’ s meant for some of the lar gest sites in
the world.
Deployment is incredibly challenging at times, but just as satisfying when
your live project works well. Enjoy the challenge, and ask for help when
you need it.Index
Please note that index links to approximate location of each term.
 
Symbols
 
+ (addition), 26
 
+= (addition in place), 122
 
* (arbitrary ar guments), 146
 
** (arbitrary keyword ar guments), 148
 
{} (braces)
 
dictionaries, 92
 
sets, 104
 
@ (decorator), 221, 424 
/ (division), 26
 
== (equality), 72, 74
 
** (exponent), 26
 
> (greater than), 75
 
>= (greater than or equal to), 75
 
# (hash mark), for comments, 29
 
!= (inequality), 74
 
< (less than), 75
 
