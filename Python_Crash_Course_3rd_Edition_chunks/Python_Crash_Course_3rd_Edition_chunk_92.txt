ning or whether a user can edit certain content on a
website:
game_active = Truecan_edit = False
Boolean values provide an ef ficient way to track the state of a program or a
particular condition that is important in your program.TRY IT YOURSELF
5-1. Conditional Tests:  Write a series of conditional tests. Print a statement describing each test
and your prediction for the results of each test. Your code should look something like this:
car = 'subaru'
print("Is car == 'subaru'? I predict True.")
print(car == 'subaru')
print("\nIs car == 'audi'? I predict False.")
print(car == 'audi')
Look closely at your results, and make sure you understand why each line evaluates to
True  or False .
Create at least 10 tests. Have at least 5 tests evaluate to True  and another 5 tests evaluate
to False .
5-2. More Conditional Tests:  You don’ t have to limit the number of tests you create to 10. If
you want to try more comparisons, write more tests and add them to conditional_tests.py . Have
at least one True  and one False  result for each of the following:
Tests for equality and inequality with strings
Tests using the lower()  method
Numerical tests involving equality and inequality , greater than and less than, greater than or
equal to, and less than or equal to
Tests using the and  keyword and the or keyword
Test whether an item is in a list
Test whether an item is not in a listif Statements
When you understand conditional tests, you can start writing if
statements. Several dif ferent kinds of if statements exist, and your choice
of which to use depends on the number of conditions you need to test. You
saw several examples of if statements in the discussion about conditional
tests, but now let’ s dig deeper into the topic.
Simple if Statements
The simplest kind of if statement has one test and one action:
if conditional_test :
    do something
You can put any conditional test in the first line and just about any action in
the indented block following the test. If the conditional