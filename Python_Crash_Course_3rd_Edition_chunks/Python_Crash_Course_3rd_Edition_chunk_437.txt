he entry was
made and a link to edit the entry . The <small>  tag around the
edit_entry  link makes it appear a little smaller than the timestamp ❹.
The second element is a div with the selector card-body  ❺, which places
the text of the entry in a simple box on the card. Notice that the Django
code for including the information on the page hasn’ t changed; only
elements that af fect the appearance of the page have. Since we no longer
have an unordered list, we’ve replaced the list item tags around the empty
list message with simple paragraph tags ❻.
Figure 20-3  shows the topic page with its new look. Learning Log’ s
functionality hasn’ t changed, but it looks significantly more professional
and inviting to users.
If you want to use a dif ferent Bootstrap template for a project, follow a
process that’ s similar to what we’ve done so far in this chapter . Copy thetemplate you want to use into base.html , and modify the elements that
contain actual content so the template displays your project’ s information.
Then use Bootstrap’ s individual styling tools to style the content on each
page.
NOTE
The Bootstrap pr oject has excellent documentation. V isit the home
page at https://getbootstrap.com  and click Docs  to learn mor e about
what Bootstrap offers.Figure 20-3 : The topic page with Bootstrap styling
TRY IT YOURSELF
20-1. Other  Forms: We applied Bootstrap’ s styles to the login  page. Make similar changes
to the rest of the form-based pages, including new_topic , new_entry , edit_entry , and
register .
20-2. Stylish Blog:  Use Bootstrap to style the Blog project you created in Chapter 19 .Deploying Learning Log
Now that we have a professional-looking project, let’ s deploy it to a live
server so anyone with an internet connection can use it. We’ll use
Platform.sh, a web-based platform that allows you to manage the
deployment of web applications. We’ll get Learning Log up and running on
Platform.sh.
Making a Platform.sh Account
To make an account, go to https://pl