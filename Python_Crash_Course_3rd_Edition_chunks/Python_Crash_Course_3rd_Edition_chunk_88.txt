ing for equality is case sensitive in Python. For example, two values
with dif ferent capitalization are not considered equal:
>>> car = 'Audi'
>>> car == 'audi'
FalseIf case matters, this behavior is advantageous. But if case doesn’ t matter
and instead you just want to test the value of a variable, you can convert the
variable’ s value to lowercase before doing the comparison:
>>> car = 'Audi'
>>> car.lower() == 'audi'
True
This test will return True  no matter how the value 'Audi'  is formatted
because the test is now case insensitive. The lower()  method doesn’ t
change the value that was originally stored in car , so you can do this kind
of comparison without af fecting the original variable:
>>> car = 'Audi'
>>> car.lower() == 'audi'
True
>>> car
'Audi'
We first assign the capitalized string 'Audi'  to the variable car . Then,
we convert the value of car  to lowercase and compare the lowercase
value to the string 'audi' . The two strings match, so Python returns
True . We can see that the value stored in car  has not been af fected by
the lower()  method.Websites enforce certain rules for the data that users enter in a manner
similar to this. For example, a site might use a conditional test like this to
ensure that every user has a truly unique username, not just a variation on
the capitalization of another person’ s username. When someone submits a
new username, that new username is converted to lowercase and compared
to the lowercase versions of all existing usernames. During this check, a
username like 'John'  will be rejected if any variation of 'john'  is
already in use.
Checking for  Inequality
When you want to determine whether two values are not equal, you can use
the inequality operator  (!=). Let’ s use another if statement to examine
how to use the inequality operator . We’ll store a requested pizza topping in
a variable and then print a message if the person did not order anchovies:
toppings.py
requested_topping = 'mushrooms'
if requested_topping !