er.is_authenticated %}
    Hello, {{ user.username }}.
  {% else %}
    <a href="{% url 'accounts:register' %}">Register<
    <a href="{% url 'accounts:login' %}">Log in</a>
  {% endif %}
--snip--
Now users who are logged in see a personalized greeting and a logout
button. Users who aren’ t logged in see a registration link and a login link.
Try out the registration page by making several user accounts with dif ferent
usernames.In the next section, we’ll restrict some of the pages so they’re available only
to registered users, and we’ll make sure every topic belongs to a specific
user.
NOTE
The r egistration system we’ve set up allows anyone to make any
number of accounts for Learning Log. Some systems r equir e users
to confirm their identity by sending a confirmation email that users
must r eply to. By doing so, the system generates fewer spam
accounts than the simple system we’r e using her e. However , when
you’r e learning to build apps, it’ s perfectly appr opriate to practice
with a simple user r egistration system like the one we’r e using.
TRY IT YOURSELF
19-2. Blog Accounts:  Add a user authentication and registration system to the Blog project you
started in Exercise 19-1 ( page 415 ). Make sure logged-in users see their username somewhere
on the screen and unregistered users see a link to the registration page.Allowing Users to Own Their Data
Users should be able to enter private data in their learning logs, so we’ll
create a system to figure out which data belongs to which user . Then we’ll
restrict access to certain pages so users can only work with their own data.
We’ll modify the Topic  model so every topic belongs to a specific user .
This will also take care of entries, because every entry belongs to a specific
topic. We’ll start by restricting access to certain pages.
Restricting Access with @login_r equir ed
Django makes it easy to restrict access to certain pages through the
@login_required  decorator . Recall from Chapter 1 1 that a decorator  