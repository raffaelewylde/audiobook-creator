te()  to allow motion to the left or right by
multiplying the alien’ s speed by the value of fleet_direction  ❷. If
fleet_direction  is 1, the value of alien_speed  will be added to
the alien’ s current position, moving the alien to the right; if
fleet_direction  is −1, the value will be subtracted from the alien’ s
position, moving the alien to the left.Dropping the Fleet and Changing Dir ection
When an alien reaches the edge, the entire fleet needs to drop down and
change direction. Therefore, we need to add some code to
AlienInvasion  because that’ s where we’ll check whether any aliens are
at the left or right edge. We’ll make this happen by writing the methods
_check_fleet_edges()  and _change_fleet_direction() , and
then modifying _update_aliens() . I’ll put these new methods after
_create_alien() , but again, the placement of these methods in the
class isn’ t critical.
alien_invasion.py
    def _check_fleet_edges(self):
        """Respond appropriately if any aliens have r
❶         for alien in self.aliens.sprites():
            if alien.check_edges():
❷                 self._change_fleet_direction()
                break
    def _change_fleet_direction(self):
        """Drop the entire fleet and change the fleet
        for alien in self.aliens.sprites():
❸             alien.rect.y += self.settings.fleet_drop_
        self.settings.fleet_direction *= -1In _check_fleet_edges() , we loop through the fleet and call
check_edges()  on each alien ❶. If check_edges()  returns True ,
we know an alien is at an edge and the whole fleet needs to change
direction; so we call _change_fleet_direction()  and break out of
the loop ❷. In _change_fleet_direction() , we loop through all the
aliens and drop each one using the setting fleet_drop_speed  ❸; then
we change the value of fleet_direction  by multiplying its current
value by −1. The line that changes the fleet’ s direction isn’ t part of the for
loop. We want to change each alien’ s vertical position, but we only want