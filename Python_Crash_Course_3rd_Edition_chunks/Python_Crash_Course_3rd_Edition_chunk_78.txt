st three
players and print their names as part of a simple roster:
players = ['charles', 'martina', 'michael', 'florence
print("Here are the first three players on my team:")
❶ for player in players[:3]:
    print(player.title())
Instead of looping through the entire list of players, Python loops through
only the first three names ❶:Here are the first three players on my team:
Charles
Martina
Michael
Slices are very useful in a number of situations. For instance, when you’re
creating a game, you could add a player ’s final score to a list every time that
player finishes playing. You could then get a player ’s top three scores by
sorting the list in decreasing order and taking a slice that includes just the
first three scores. When you’re working with data, you can use slices to
process your data in chunks of a specific size. Or , when you’re building a
web application, you could use slices to display information in a series of
pages with an appropriate amount of information on each page.
Copying a List
Often, you’ll want to start with an existing list and make an entirely new list
based on the first one. Let’ s explore how copying a list works and examine
one situation in which copying a list is useful.
To copy a list, you can make a slice that includes the entire original list by
omitting the first index and the second index ( [:] ). This tells Python to
make a slice that starts at the first item and ends with the last item,
producing a copy of the entire list.For example, imagine we have a list of our favorite foods and want to make
a separate list of foods that a friend likes. This friend likes everything in our
list so far , so we can create their list by copying ours:
foods.py
my_foods = ['pizza', 'falafel', 'carrot cake']
❶ friend_foods = my_foods[:]
print("My favorite foods are:")
print(my_foods)
print("\nMy friend's favorite foods are:")
print(friend_foods)
First, we make a list of the foods we like called my_foods . Then we make
a new list called friend_foo