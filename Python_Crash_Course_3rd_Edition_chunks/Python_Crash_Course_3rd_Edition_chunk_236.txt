e tests for all the simple projects you try as a new
programmer . But as soon as you start to work on projects that involve
significant development ef fort, you should test the critical behaviors of your
functions and classes. You’ll be more confident that new work on your
project won’ t break the parts that work, and this will give you the freedom
to make improvements to your code. If you accidentally break existing
functionality , you’ll know right away , so you can still fix the problem
easily . Responding to a failed test that you ran is much easier than
responding to a bug report from an unhappy user .
Other programmers will respect your projects more if you include some
initial tests. They’ll feel more comfortable experimenting with your code
and be more willing to work with you on projects. If you want to contribute
to a project that other programmers are working on, you’ll be expected to
show that your code passes existing tests and you’ll usually be expected to
write tests for any new behavior you introduce to the project.Play around with tests to become familiar with the process of testing your
code. Write tests for the most critical behaviors of your functions and
classes, but don’ t aim for full coverage in early projects unless you have a
specific reason to do so.PART II
PROJECTS
Congratulations! You now know enough about Python to start building
interactive and meaningful projects. Creating your own projects will teach
you new skills and solidify your understanding of the concepts introduced
in Part I.
Part II contains three kinds of projects, and you can choose to do any or all
of these projects in whichever order you like. Here’ s a brief description of
each project to help you decide which to dig into first.
Alien Invasion: Making a Game with Python
In the Alien Invasion project ( Chapters 12 , 13, and 14), you’ll use the
Pygame package to develop a 2D game. The goal of the game is to shoot
down a fleet of aliens as they drop down the screen, in lev