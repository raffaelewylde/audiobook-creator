sults.
print("\n--- Poll Results ---")
❹ for name, response in responses.items():
    print(f"{name} would like to climb {response}.")
The program first defines an empty dictionary ( responses ) and sets a
flag (polling_active ) to indicate that polling is active. As long as
polling_active  is True , Python will run the code in the while
loop.Within the loop, the user is prompted to enter their name and a mountain
they’d like to climb ❶. That information is stored in the responses
dictionary ❷, and the user is asked whether or not to keep the poll running
❸. If they enter yes , the program enters the while  loop again. If they
enter no, the polling_active  flag is set to False , the while  loop
stops running, and the final code block ❹ displays the results of the poll.
If you run this program and enter sample responses, you should see output
like this:
What is your name? Eric
Which mountain would you like to climb someday? Denal
Would you like to let another person respond? (yes/ n
What is your name? Lynn
Which mountain would you like to climb someday? Devil
Would you like to let another person respond? (yes/ n
--- Poll Results ---
Eric would like to climb Denali.
Lynn would like to climb Devil's Thumb.TRY IT YOURSELF
7-8. Deli:  Make a list called sandwich_orders  and fill it with the names of various
sandwiches. Then make an empty list called finished_sandwiches . Loop through the list
of sandwich orders and print a message for each order , such as I made your tuna
sandwich . As each sandwich is made, move it to the list of finished sandwiches. After all the
sandwiches have been made, print a message listing each sandwich that was made.
7-9. No Pastrami:  Using the list sandwich_orders  from Exercise 7-8, make sure the
sandwich 'pastrami'  appears in the list at least three times. Add code near the beginning of
your program to print a message saying the deli has run out of pastrami, and then use a while
loop to remove all occurrences of 'pastrami'  from sandwich_o