also makes it much easier to modify the site.
To modify an element common to many pages, you only need to modify the
parent template. Your changes are then carried over to every page that
inherits from that template. In a project that includes tens or hundreds of
pages, this structure can make it much easier and faster to improve your
site.
In a lar ge project, it’ s common to have one parent template called base.html
for the entire site and parent templates for each major section of the site. All
the section templates inherit from base.html , and each page in the site
inherits from a section template. This way you can easily modify the look
and feel of the site as a whole, any section in the site, or any individual
page. This configuration provides a very ef ficient way to work, and
encourages you to steadily update your project over time.The Topics Page
Now that we have an ef ficient approach to building pages, we can focus on
our next two pages: the general topics page and the page to display entries
for a single topic. The topics page will show all topics that users have
created, and it’ s the first page that will involve working with data.
The Topics URL  Pattern
First, we define the URL  for the topics page. It’ s common to choose a
simple URL  fragment that reflects the kind of information presented on the
page. We’ll use the word topics , so the URL  http://localhost:8000/topics/
will return this page. Here’ s how we modify learning_logs/urls.py :
learning_logs/urls.py
"""Defines URL patterns for learning_logs."""
--snip--
urlpatterns = [
    # Home page
    path('', views.index, name='index'),
    # Page that shows all topics.
    path('topics/', views.topics, name='topics'),
]The new URL  pattern is the word topics , followed by a forward slash.
When Django examines a requested URL, this pattern will match any URL
that has the base URL  followed by topics . You can include or omit a
forward slash at the end, but there can’ t be anything else after the word