animal_type
and the ar gument 'harry'  is assigned to the parameter pet_name  ❷. In
the function body , these two parameters are used to display information
about the pet being described.
The output describes a hamster named Harry:
I have a hamster.
My hamster's name is Harry.
Multiple Function Calls
You can call a function as many times as needed. Describing a second,
different pet requires just one more call to describe_pet() :
def describe_pet(animal_type, pet_name):
    """Display information about a pet."""
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.titldescribe_pet('hamster', 'harry')
describe_pet('dog', 'willie')
In this second function call, we pass describe_pet()  the ar guments
'dog'  and 'willie' . As with the previous set of ar guments we used,
Python matches 'dog'  with the parameter animal_type  and
'willie'  with the parameter pet_name . As before, the function does
its job, but this time it prints values for a dog named Willie. Now we have a
hamster named Harry and a dog named Willie:
I have a hamster.
My hamster's name is Harry.
I have a dog.
My dog's name is Willie.
Calling a function multiple times is a very ef ficient way to work. The code
describing a pet is written once in the function. Then, anytime you want to
describe a new pet, you call the function with the new pet’ s information.
Even if the code for describing a pet were to expand to 10 lines, you could
still describe a new pet in just one line by calling the function again.Order  Matters in Positional Arguments
You can get unexpected results if you mix up the order of the ar guments in
a function call when using positional ar guments:
def describe_pet(animal_type, pet_name):
    """Display information about a pet."""
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.titl
describe_pet('harry', 'hamster')
In this function call, we list the name first and the type of animal second.
Because the ar gument 'h