s.py , it’s helpful to mark of f the
section where we’re adding new settings. The first new setting we’ll add is
LOGIN_REDIRECT_URL , which tells Django which URL  to redirect to
after a successful login attempt.
Linking to the Login Page
Let’s add the login link to base.html  so it appears on every page. We don’ t
want the link to display when the user is already logged in, so we nest it
inside an {% if %}  tag:
base.html<p>
  <a href="{% url 'learning_logs:index' %}">Learning 
  <a href="{% url 'learning_logs:topics' %}">Topics</
❶   {% if user.is_authenticated %}
❷     Hello, {{ user.username }}.
  {% else %}
❸     <a href="{% url 'accounts:login' %}">Log in</a>
  {% endif %}
</p>
{% block content %}{% endblock content %}
In Django’ s authentication system, every template has a user  object
available that always has an is_authenticated  attribute set: the
attribute is True  if the user is logged in and False  if they aren’ t. This
attribute allows you to display one message to authenticated users and
another to unauthenticated users.
Here we display a greeting to users currently logged in ❶. Authenticated
users have an additional username  attribute set, which we use to
personalize the greeting and remind the user they’re logged in ❷. For users
who haven’ t been authenticated, we display a link to the login page ❸.Using the Login Page
We’ve already set up a user account, so let’ s log in to see if the page works.
Go to http://localhost:8000/admin/ . If you’re still logged in as an admin,
look for a logout  link in the header and click it.
When you’re logged out, go to http://localhost:8000/accounts/login/ . You
should see a login page similar to the one shown in Figure 19-4 . Enter the
username and password you set up earlier , and you should be brought back
to the home page. The header on the home page should display a greeting
personalized with your username.Figure 19-4 : The login page
Logging Out
Now we need to provide a way for users to log out. Logout reque