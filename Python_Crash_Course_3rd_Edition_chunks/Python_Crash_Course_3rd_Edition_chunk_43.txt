 = favorite_language.rstrip()
>>> favorite_language
'python'
To remove the whitespace from the string, you strip the whitespace from the
right side of the string and then associate this new value with the original
variable ❶. Changing a variable’ s value is done often in programming. This
is how a variable’ s value can be updated as a program is executed or in
response to user input.
You can also strip whitespace from the left side of a string using the
lstrip()  method, or from both sides at once using strip() :
❶ >>> favorite_language = ' python '
❷ >>> favorite_language.rstrip()
' python'
❸ >>> favorite_language.lstrip()
'python '
❹ >>> favorite_language.strip()
'python'
In this example, we start with a value that has whitespace at the beginning
and the end ❶. We then remove the extra space from the right side ❷, from
the left side ❸, and from both sides ❹. Experimenting with these strippingfunctions can help you become familiar with manipulating strings. In the
real world, these stripping functions are used most often to clean up user
input before it’ s stored in a program.
Removing Pr efixes
When working with strings, another common task is to remove a prefix.
Consider a URL  with the common prefix https:// . We want to remove this
prefix, so we can focus on just the part of the URL  that users need to enter
into an address bar . Here’ s how to do that:
>>> nostarch_url = 'https://nostarch.com'
>>> nostarch_url.removeprefix('https://')
'nostarch.com'
Enter the name of the variable followed by a dot, and then the method
removeprefix() . Inside the parentheses, enter the prefix you want to
remove from the original string.
Like the methods for removing whitespace, removeprefix()  leaves the
original string unchanged. If you want to keep the new value with the prefix
removed, either reassign it to the original variable or assign it to a new
variable:>>> simple_url = nostarch_url.removeprefix('https://'
When you see a URL  in an address bar and the https://  part is