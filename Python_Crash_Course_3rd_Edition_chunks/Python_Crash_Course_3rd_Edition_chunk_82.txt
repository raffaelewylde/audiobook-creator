d mor e readable. If you want
to define a tuple with one element, you need to include a trailing
comma:
    my_t = (3,)
It doesn’ t often make sense to build a tuple with one element, but
this can happen when tuples ar e generated automatically .
Looping Through All Values in a Tuple
You can loop over all the values in a tuple using a for  loop, just as you
did with a list:
dimensions = (200, 50)
for dimension in dimensions:    print(dimension)
Python returns all the elements in the tuple, just as it would for a list:
200
50
Writing Over  a Tuple
Although you can’ t modify a tuple, you can assign a new value to a variable
that represents a tuple. For example, if we wanted to change the dimensions
of this rectangle, we could redefine the entire tuple:
dimensions = (200, 50)
print("Original dimensions:")
for dimension in dimensions:
    print(dimension)
dimensions = (400, 100)
print("\nModified dimensions:")
for dimension in dimensions:
    print(dimension)
The first four lines define the original tuple and print the initial dimensions.
We then associate a new tuple with the variable dimensions , and printthe new values. Python doesn’ t raise any errors this time, because
reassigning a variable is valid:
Original dimensions:
200
50
Modified dimensions:
400
100
When compared with lists, tuples are simple data structures. Use them when
you want to store a set of values that should not be changed throughout the
life of a program.
TRY IT YOURSELF
4-13. Buffet:  A buffet-style restaurant of fers only five basic foods. Think of five simple foods,
and store them in a tuple.
Use a for  loop to print each food the restaurant of fers.
Try to modify one of the items, and make sure that Python rejects the change.
The restaurant changes its menu, replacing two of the items with dif ferent foods. Add a line
that rewrites the tuple, and then use a for  loop to print each of the items on the revised
menu.Styling Your Code
Now that you’re writing longer programs, it’ s a good idea to 