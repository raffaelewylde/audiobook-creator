th that item after removing it. The term pop comes from thinking of a list
as a stack of items and popping one item of f the top of the stack. In this
analogy , the top of a stack corresponds to the end of a list.
Let’s pop a motorcycle from the list of motorcycles:
❶ motorcycles = ['honda', 'yamaha', 'suzuki']
print(motorcycles)
❷ popped_motorcycle = motorcycles.pop()
❸ print(motorcycles)
❹ print(popped_motorcycle)
We start by defining and printing the list motorcycles  ❶. Then we pop a
value from the list, and assign that value to the variable
popped_motorcycle  ❷. We print the list ❸ to show that a value has
been removed from the list. Then we print the popped value ❹ to prove that
we still have access to the value that was removed.
The output shows that the value 'suzuki'  was removed from the end of
the list and is now assigned to the variable popped_motorcycle :
['honda', 'yamaha', 'suzuki']
['honda', 'yamaha']suzuki
How might this pop()  method be useful? Imagine that the motorcycles in
the list are stored in chronological order , according to when we owned
them. If this is the case, we can use the pop()  method to print a statement
about the last motorcycle we bought:
motorcycles = ['honda', 'yamaha', 'suzuki']
last_owned = motorcycles.pop()
print(f"The last motorcycle I owned was a {last_owned
The output is a simple sentence about the most recent motorcycle we
owned:
The last motorcycle I owned was a Suzuki.
Popping Items fr om Any Position in a List
You can use pop()  to remove an item from any position in a list by
including the index of the item you want to remove in parentheses:
motorcycles = ['honda', 'yamaha', 'suzuki']first_owned = motorcycles.pop(0)
print(f"The first motorcycle I owned was a {first_own
We start by popping the first motorcycle in the list, and then we print a
message about that motorcycle. The output is a simple sentence describing
the first motorcycle I ever owned:
The first motorcycle I owned was a Honda.
Remember that each time yo