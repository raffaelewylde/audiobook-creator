AK US","2021-01-01",,"4
This is an excerpt of weather data from January 1, 2021, in Sitka, Alaska. It
includes the day’ s high and low temperatures, as well as a number of other
measurements from that day . CSV  files can be tedious for humans to read,
but programs can process and extract information from them quickly and
accurately .
We’ll begin with a small set of CSV -formatted weather data recorded in
Sitka; it is available in this book’ s resources at https://ehmatthes.github.io/p
cc_3e . Make a folder called weather_data  inside the folder where you’re
saving this chapter ’s programs. Copy the file sitka_weather_07-
2021_simple.csv  into this new folder . (After you download this book’ s
resources, you’ll have all the files you need for this project.)NOTE
The weather data in this pr oject was originally downloaded fr om htt
ps://ncdc.noaa.gov/cdo-web .
Parsing the CSV  File Headers
Python’ s csv  module in the standard library parses the lines in a CSV  file
and allows us to quickly extract the values we’re interested in. Let’ s start by
examining the first line of the file, which contains a series of headers for the
data. These headers tell us what kind of information the data holds:
sitka_highs.py
from pathlib import Path
import csv
❶ path = Path('weather_data/sitka_weather_07-2021_simpl
lines = path.read_text(encoding='utf-8').splitlines()
❷ reader = csv.reader(lines)❸ header_row = next(reader)
print(header_row)
We first import Path  and the csv  module. We then build a Path  object
that looks in the weather_data  folder , and points to the specific weather
data file we want to work with ❶. We read the file and chain the
splitlines()  method to get a list of all lines in the file, which we
assign to lines .
Next, we build a reader  object ❷. This is an object that can be used to
parse each line in the file. To make a reader object, call the function
csv.reader()  and pass it the list of lines from the CSV  file.
When given a reader  object, the next()  func