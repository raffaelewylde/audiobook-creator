earning_logs/views.py
--snip--
@login_required
def edit_entry(request, entry_id):
    """Edit an existing entry."""
    entry = Entry.objects.get(id=entry_id)
    topic = entry.topic
    if topic.owner != request.user:
        raise Http404
    if request.method != 'POST':
        --snip--
We retrieve the entry and the topic associated with this entry . We then check
whether the owner of the topic matches the currently logged-in user; if they
don’t match, we raise an Http404  exception.Associating New Topics with the Curr ent User
Currently , the page for adding new topics is broken because it doesn’ t
associate new topics with any particular user . If you try adding a new topic,
you’ll see the message IntegrityError  along with NOT NULL
constraint failed: learning_logs_topic.owner_id . Django is
saying you can’ t create a new topic without specifying a value for the
topic’ s owner  field.
There’ s a straightforward fix for this problem, because we have access to
the current user through the request  object. Add the following code,
which associates the new topic with the current user:
learning_logs/views.py
--snip--
@login_required
def new_topic(request):
    --snip--
    else:
        # POST data submitted; process data.
        form = TopicForm(data=request.POST)
        if form.is_valid():
❶             new_topic = form.save(commit=False)
❷             new_topic.owner = request.user
❸             new_topic.save()            return redirect('learning_logs:topics')
    # Display a blank or invalid form.
    context = {'form': form}
    return render(request, 'learning_logs/new_topic.h
 --snip--
When we first call form.save() , we pass the commit=False
argument because we need to modify the new topic before saving it to the
database ❶. We then set the new topic’ s owner  attribute to the current user
❷. Finally , we call save()  on the topic instance we just defined ❸. Now
the topic has all the required data and will save successfully .
You should be able to add as 