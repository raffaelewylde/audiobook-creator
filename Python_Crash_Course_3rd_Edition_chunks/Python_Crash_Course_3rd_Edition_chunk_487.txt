m.sh CLI.
Deploying fr om Windows
Windows has seen a resur gence in popularity with programmers in recent
years. Windows has integrated many dif ferent elements of other operating
systems, providing users with a number of options for how to do local
development work and interact with remote systems.
One of the most significant dif ficulties in deploying from Windows is that
the core Windows operating system is not the same as what a Linux-based
remote server uses. A base Windows system has a dif ferent set of tools and
languages than a base Linux system, so to carry out deployment work from
Windows, you’ll need to choose how to integrate Linux-based tool sets into
your local environment.Windows Subsystem for  Linux
One popular approach is to use Windows Subsystem for Linux  (WSL ), an
environment that allows Linux to run directly on Windows. If you have
WSL  set up, using the Platform.sh CLI on Windows becomes as easy as
using it on Linux. The CLI won’ t know it’ s running on Windows; it will just
see the Linux environment you’re using it in.
Setting up WSL  is a two-step process: you first install WSL, and then
choose a Linux distribution to install into the WSL  environment. Setting up
a WSL  environment is more than can be described here; if you’re interested
in this approach and don’ t already have it set up, see the documentation at h
ttps://docs.micr osoft.com/en-us/windows/wsl/about . Once you have WSL
set up, you can follow the instructions in the Linux section of this appendix
to continue your deployment work.
Git Bash
Another approach to building a local environment that you can deploy from
uses Git Bash , a terminal environment that’ s compatible with Bash but runs
on Windows. Git Bash is installed along with Git when you use the installer
from https://git-scm.com . This approach can work, but it isn’ t as
streamlined as WSL. In this approach, you’ll have to use a Windows
terminal for some steps and a Git Bash terminal for others.First you’ll need to inst