nt to limit
the size of individual entries. The date_added  attribute allows us to
present entries in the order they were created, and to place a timestamp next
to each entry .
The Meta  class is nested inside the Entry  class ❹. The Meta  class
holds extra information for managing a model; here, it lets us set a special
attribute telling Django to use Entries when it needs to refer to more
than one entry . Without this, Django would refer to multiple entries as
Entrys .
The __str__()  method tells Django which information to show when it
refers to individual entries. Because an entry can be a long body of text,
__str__()  returns just the first 50 characters of text  ❺. We also add
an ellipsis to clarify that we’re not always displaying the entire entry .
Migrating the Entry Model
Because we’ve added a new model, we need to migrate the database again.
This process will become quite familiar: you modify models.py , run thecommand python manage.py makemigrations app_name , and then
run the command python manage.py migrate .
Migrate the database and check the output by entering the following
commands:
(ll_env)learning_log$ python manage.py makemigrations
Migrations for 'learning_logs':
❶   learning_logs/migrations/0002_entry.py
    - Create model Entry
(ll_env)learning_log$ python manage.py migrate
Operations to perform:
  --snip--
❷   Applying learning_logs.0002_entry... OK
A new migration called 0002_entry .py is generated, which tells Django how
to modify the database to store information related to the model Entry  ❶.
When we issue the migrate  command, we see that Django applied this
migration and everything worked properly ❷.
Registering Entry with the Admin Site
We also need to register the Entry  model. Here’ s what admin.py  should
look like now:admin.py
from django.contrib import admin
from .models import Topic, Entry
admin.site.register(Topic)
admin.site.register(Entry)
Go back to http://localhost/admin/ , and you should see Entries listed under
Learning_Lo