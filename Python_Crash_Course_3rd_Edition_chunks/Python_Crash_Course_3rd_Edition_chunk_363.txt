 use repo_links  for the x-values in the
chart. The result looks the same as before, but now the viewer can click any
of the project names at the bottom of the chart to visit that project’ s home
page on GitHub. Now we have an interactive, informative visualization of
data retrieved through an API!
Customizing Marker  Colors
Once a chart has been created, almost any aspect of the chart can be
customized through an update method. We’ve used the
update_layout()  method previously . Another method,
update_traces() , can be used to customize the data that’ s represented
on a chart.
Let’s change the bars to a darker blue, with some transparency:
--snip--
fig.update_layout(title_font_size=28, xaxis_title_fon
        yaxis_title_font_size=20)
fig.update_traces(marker_color='SteelBlue', marker_opfig.show()
In Plotly , a trace  refers to a collection of data on a chart. The
update_traces()  method can take a number of dif ferent ar guments;
any ar gument that starts with marker_  affects the markers on the chart.
Here we set each marker ’s color to 'SteelBlue' ; any named CSS color
will work here. We also set the opacity of each marker to 0.6 . An opacity
of 1.0 will be entirely opaque, and an opacity of 0 will be entirely invisible.
More About Plotly and the GitHub API
Plotly’ s documentation is extensive and well or ganized; however , it can be
hard to know where to start reading. A good place to start is with the article
“Plotly Express in Python,” at https://plotly .com/python/plotly-expr ess. This
is an overview of all the plots you can make with Plotly Express, and you
can find links to longer articles about each individual chart type.
If you want to understand how to customize Plotly charts better , the article
“Styling Plotly Express Figures in Python” will expand on what you’ve
seen in Chapters 15 –17. You can find this article at https://plotly .com/pytho
n/styling-plotly-expr ess.
For more about the GitHub API, refer to its documentation at https://docs.gi
thub.co