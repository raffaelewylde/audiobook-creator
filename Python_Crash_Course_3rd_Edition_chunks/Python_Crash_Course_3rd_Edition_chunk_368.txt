should
correspond to the number of comments each submission has. The label for each bar should
include the submission’ s title and act as a link to the discussion page for that submission. If you
get a KeyError  when creating a chart, use a try-except  block to skip over the
promotional posts.
17-3. Testing python_r epos.py:  In python_r epos.py , we printed the value of status_code  to
make sure the API call was successful. Write a program called test_python_r epos.py  that uses
pytest  to assert that the value of status_code  is 200. Figure out some other assertions
you can make: for example, that the number of items returned is expected and that the total
number of repositories is greater than a certain amount.
17-4. Further  Exploration:  Visit the documentation for Plotly and either the GitHub API or the
Hacker News API. Use some of the information you find there to either customize the style of
the plots we’ve already made or pull some dif ferent information and create your own
visualizations. If you’re curious about exploring other APIs, take a look at the APIs mentioned
in the GitHub repository at https://github.com/public-apis .
Summary
In this chapter , you learned how to use APIs to write self-contained
programs that automatically gather the data they need and use that data tocreate a visualization. You used the GitHub API to explore the most-starred
Python projects on GitHub, and you also looked briefly at the Hacker News
API. You learned how to use the Requests package to automatically issue an
API call and how to process the results of that call. We also introduced
some Plotly settings that further customize the appearance of the charts you
generate.
In the next chapter , you’ll use Django to build a web application as your
final project.18
GETTING STARTED WITH
DJANGO
As the internet has evolved, the line between websites and
mobile apps has blurred. Websites and apps both help users
interact with data in a variety of ways. Fortunately , you can
use Dj