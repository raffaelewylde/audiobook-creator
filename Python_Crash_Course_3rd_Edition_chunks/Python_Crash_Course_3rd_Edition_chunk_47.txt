y to represent the result as precisely as possible, which is sometimes
difficult given how computers have to represent numbers internally . Just
ignore the extra decimal places for now; you’ll learn ways to deal with the
extra places when you need to in the projects in Part II .
Integers and Floats
When you divide any two numbers, even if they are integers that result in a
whole number , you’ll always get a float:
>>> 4/2
2.0
If you mix an integer and a float in any other operation, you’ll get a float as
well:
>>> 1 + 2.0
3.0
>>> 2 * 3.06.0
>>> 3.0 ** 2
9.0
Python defaults to a float in any operation that uses a float, even if the
output is a whole number .
Underscor es in Numbers
When you’re writing long numbers, you can group digits using underscores
to make lar ge numbers more readable:
>>> universe_age = 14_000_000_000
When you print a number that was defined using underscores, Python prints
only the digits:
>>> print(universe_age)
14000000000
Python ignores the underscores when storing these kinds of values. Even if
you don’ t group the digits in threes, the value will still be unaf fected. To
Python, 1000  is the same as 1_000 , which is the same as 10_00 . This
feature works for both integers and floats.Multiple Assignment
You can assign values to more than one variable using just a single line of
code. This can help shorten your programs and make them easier to read;
you’ll use this technique most often when initializing a set of numbers.
For example, here’ s how you can initialize the variables x, y, and z to
zero:
>>> x, y, z = 0, 0, 0
You need to separate the variable names with commas, and do the same
with the values, and Python will assign each value to its respective variable.
As long as the number of values matches the number of variables, Python
will match them up correctly .
Constants
A constant  is a variable whose value stays the same throughout the life of a
program. Python doesn’ t have built-in constant types, but Python
programmers use all cap