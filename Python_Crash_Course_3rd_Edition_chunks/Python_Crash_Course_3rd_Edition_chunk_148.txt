irt of any size with a dif ferent message.
8-5. Cities:  Write a function called describe_city()  that accepts the name of a city and its
country . The function should print a simple sentence, such as Reykjavik is in Iceland .
Give the parameter for the country a default value. Call your function for three dif ferent cities,
at least one of which is not in the default country .Return Values
A function doesn’ t always have to display its output directly . Instead, it can
process some data and then return a value or set of values. The value the
function returns is called a return value . The return  statement takes a
value from inside a function and sends it back to the line that called the
function. Return values allow you to move much of your program’ s grunt
work into functions, which can simplify the body of your program.
Returning a Simple Value
Let’s look at a function that takes a first and last name, and returns a neatly
formatted full name:
formatted_name.py
def get_formatted_name(first_name, last_name):
    """Return a full name, neatly formatted."""
❶     full_name = f"{first_name} {last_name}"
❷     return full_name.title()
❸ musician = get_formatted_name('jimi', 'hendrix')
print(musician)
The definition of get_formatted_name()  takes as parameters a first
and last name. The function combines these two names, adds a spacebetween them, and assigns the result to full_name  ❶. The value of
full_name  is converted to title case, and then returned to the calling line
❷.
When you call a function that returns a value, you need to provide a
variable that the return value can be assigned to. In this case, the returned
value is assigned to the variable musician  ❸. The output shows a neatly
formatted name made up of the parts of a person’ s name:
Jimi Hendrix
This might seem like a lot of work to get a neatly formatted name when we
could have just written:
print("Jimi Hendrix")
However , when you consider working with a lar ge program that needs to
store many first 