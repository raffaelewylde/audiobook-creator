ing, to save space. Choose a version of foods.py , and write two for  loops to print each list
of foods.Tuples
Lists work well for storing collections of items that can change throughout
the life of a program. The ability to modify lists is particularly important
when you’re working with a list of users on a website or a list of characters
in a game. However , sometimes you’ll want to create a list of items that
cannot change. Tuples allow you to do just that. Python refers to values that
cannot change as immutable , and an immutable list is called a tuple .
Defining a Tuple
A tuple looks just like a list, except you use parentheses instead of square
brackets. Once you define a tuple, you can access individual elements by
using each item’ s index, just as you would for a list.
For example, if we have a rectangle that should always be a certain size, we
can ensure that its size doesn’ t change by putting the dimensions into a
tuple:
dimensions.py
dimensions = (200, 50)
print(dimensions[0])
print(dimensions[1])We define the tuple dimensions , using parentheses instead of square
brackets. Then we print each element in the tuple individually , using the
same syntax we’ve been using to access elements in a list:
200
50
Let’s see what happens if we try to change one of the items in the tuple
dimensions :
dimensions = (200, 50)
dimensions[0] = 250
This code tries to change the value of the first dimension, but Python
returns a type error . Because we’re trying to alter a tuple, which can’ t be
done to that type of object, Python tells us we can’ t assign a new value to an
item in a tuple:
Traceback (most recent call last):
  File "dimensions.py", line 2, in <module>
    dimensions[0] = 250
TypeError: 'tuple' object does not support item assigThis is beneficial because we want Python to raise an error when a line of
code tries to change the dimensions of the rectangle.
NOTE
Tuples ar e technically defined by the pr esence of a comma; the
parentheses make them look neater an