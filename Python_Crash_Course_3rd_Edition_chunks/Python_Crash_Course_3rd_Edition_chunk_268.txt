ch alien precisely ❷.
This Alien  class doesn’ t need a method for drawing it to the screen;
instead, we’ll use a Pygame group method that automatically draws all the
elements of a group to the screen.
Creating an Instance of the Alien
We want to create an instance of Alien  so we can see the first alien on the
screen. Because it’ s part of our setup work, we’ll add the code for thisinstance at the end of the __init__()  method in AlienInvasion .
Eventually , we’ll create an entire fleet of aliens, which will be quite a bit of
work, so we’ll make a new helper method called _create_fleet() .
The order of methods in a class doesn’ t matter , as long as there’ s some
consistency to how they’re placed. I’ll place _create_fleet()  just
before the _update_screen()  method, but anywhere in
AlienInvasion  will work. First, we’ll import the Alien  class.
Here are the updated import  statements for alien_invasion.py :
alien_invasion.py
--snip--
from bullet import Bullet
from alien import Alien
And here’ s the updated __init__()  method:
alien_invasion.py
    def __init__(self):
        --snip--
        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()        self.aliens = pygame.sprite.Group()
        self._create_fleet()
We create a group to hold the fleet of aliens, and we call
_create_fleet() , which we’re about to write.
Here’ s the new _create_fleet()  method:
alien_invasion.py
    def _create_fleet(self):
        """Create the fleet of aliens."""
        # Make an alien.
        alien = Alien(self)
        self.aliens.add(alien)
In this method, we’re creating one instance of Alien  and then adding it to
the group that will hold the fleet. The alien will be placed in the default
upper -left area of the screen.
To make the alien appear , we need to call the group’ s draw()  method in
_update_screen() :
alien_invasion.py    def _update_screen(self):
        --snip--
        self.ship.blitme()
        self.aliens.draw(self.screen)
        pygame.display.fl