ake
the value of self.rect.midbottom  match the midbottom  attribute of
the screen’ s rect  ❹. Pygame uses these rect  attributes to position the
ship image so it’ s centered horizontally and aligned with the bottom of the
screen.
Finally , we define the blitme()  method ❺, which draws the image to the
screen at the position specified by self.rect .Drawing the Ship to the Scr een
Now let’ s update alien_invasion.py  so it creates a ship and calls the ship’ s
blitme()  method:
alien_invasion.py
--snip--
from settings import Settings
from ship import Ship
class AlienInvasion:
    """Overall class to manage game assets and behavi
    def __init__(self):
        --snip--
        pygame.display.set_caption("Alien Invasion")
❶         self.ship = Ship(self)
    def run_game(self):
            --snip--
            # Redraw the screen during each pass thro
            self.screen.fill(self.settings.bg_color)
❷             self.ship.blitme()
            # Make the most recently drawn screen vis            pygame.display.flip()
            self.clock.tick(60)
--snip--
We import Ship  and then make an instance of Ship  after the screen has
been created ❶. The call to Ship()  requires one ar gument: an instance of
AlienInvasion . The self  argument here refers to the current instance
of AlienInvasion . This is the parameter that gives Ship  access to the
game’ s resources, such as the screen  object. We assign this Ship
instance to self.ship .
After filling the background, we draw the ship on the screen by calling
ship.blitme() , so the ship appears on top of the background ❷.
When you run alien_invasion.py  now , you should see an empty game
screen with the rocket ship sitting at the bottom center , as shown in Figure 1
2-2.Figure 12-2 : Alien Invasion  with the ship at the bottom center of the scr een
Refactoring: The _check_events() and
_update_screen() Methods
In lar ge projects, you’ll often refactor code you’ve written before adding
more code. Refactoring simplifies the s