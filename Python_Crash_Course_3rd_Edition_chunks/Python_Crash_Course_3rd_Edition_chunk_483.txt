o,
because that can inform some of your troubleshooting work. At the time of
this writing, a basic remote server on Platform.sh runs Debian Linux; most
remote servers are Linux-based systems.
Basic Troubleshooting
Some troubleshooting steps are specific to each OS, but we’ll get to that in
a moment. First, let’ s consider the steps everyone should try when
troubleshooting a deployment.
Your best resource is the output generated during the attempted push. This
output can look intimidating; if you’re new to deploying apps, it can look
highly technical, and there’ s usually a lot of it. The good news is you don’ t
need to understand everything in the output. You should have two goals
when skimming log output: identify any deployment steps that worked, and
identify any steps that didn’ t. If you can do this, you might be able to figure
out what to change in your project, or in your deployment process, to make
your next push successful.
Follow Onscr een Suggestions
Sometimes, the platform you’re pushing to will generate a message that has
a clear suggestion for how to address the issue. For example, here’ s themessage you’ll see if you create a Platform.sh project before initializing a
Git repository , and then try to push the project:
$ platform push
❶ Enter a number to choose a project:
  [0] ll_project (votohz445ljyg)
 > 0
❷   [RootNotFoundException]
  Project root not found. This can only be run from i
❸  To set the project for this Git repository, run:
    platform project:set-remote [id]
We’re trying to push a project, but the local project hasn’ t been associated
with a remote project yet. So, the Platform.sh CLI asks which remote
project we want to push to ❶. We enter 0, to select the only project listed.
But next, we see a RootNotFoundException  ❷. This happens because
Platform.sh looks for a .git directory when it inspects the local project, to
figure out how to connect the local project with the remote project. In this
case, since there was no .git directory w