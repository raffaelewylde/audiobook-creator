rates the plot shown in Figure 15-4 . A wide variety of styles
is available; play around with these styles to find some that you like.Figure 15-4 : The built-in seaborn-v0_8 style
Plotting and Styling Individual Points with scatter()
Sometimes, it’ s useful to plot and style individual points based on certain
characteristics. For example, you might plot small values in one color and
larger values in a dif ferent color . You could also plot a lar ge dataset with
one set of styling options and then emphasize individual points by
replotting them with dif ferent options.
To plot a single point, pass the single x- and y-values of the point to
scatter() :
scatter_squar es.pyimport matplotlib.pyplot as plt
plt.style.use('seaborn-v0_8')
fig, ax = plt.subplots()
ax.scatter(2, 4)
plt.show()
Let’s style the output to make it more interesting. We’ll add a title, label the
axes, and make sure all the text is lar ge enough to read:
import matplotlib.pyplot as plt
plt.style.use('seaborn-v0_8')
fig, ax = plt.subplots()
❶ ax.scatter(2, 4, s=200)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(labelsize=14)
plt.show()We call scatter()  and use the s argument to set the size of the dots
used to draw the graph ❶. When you run scatter_squar es.py now, you
should see a single point in the middle of the chart, as shown in Figure 15-
5.
Figure 15-5 : Plotting a single point
Plotting a Series of Points with scatter()
To plot a series of points, we can pass scatter()  separate lists of x- and
y-values, like this:
scatter_squar es.pyimport matplotlib.pyplot as plt
x_values = [1, 2, 3, 4, 5]
y_values = [1, 4, 9, 16, 25]
plt.style.use('seaborn-v0_8')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, s=100)
# Set chart title and label axes.
--snip--
The x_values  list contains the numbers to be squared, and y_values
contains the square of