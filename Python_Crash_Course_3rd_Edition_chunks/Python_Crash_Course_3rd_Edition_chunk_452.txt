tform.sh recognizes that the repository has been updated, and it rebuilds
the project to make sure all the changes have been taken into account. It
doesn’ t rebuild the database, so we haven’ t lost any data.
To make sure this change took ef fect, visit the /topics/999/  URL  again. You
should see just the message Server Err or (500) , with no sensitive
information about the project at all.
Creating Custom Err or Pages
In Chapter 19 , we configured Learning Log to return a 404 error if the user
requests a topic or entry that doesn’ t belong to them. Now you’ve seen a
500 server error as well. A 404 error usually means your Django code is
correct, but the object being requested doesn’ t exist. A 500 error usually
means there’ s an error in the code you’ve written, such as an error in a
function in views.py . Django currently returns the same generic error page
in both situations, but we can write our own 404 and 500 error page
templates that match Learning Log’ s overall appearance. These templates
belong in the root template directory .Making Custom Templates
In the learning_log  folder , make a new folder called templates . Then make
a new file called 404.html ; the path to this file should be
learning_log/templates/404.html . Here’ s the code for this file:
404.html
{% extends "learning_logs/base.html" %}
{% block page_header %}
  <h2>The item you requested is not available. (404)<
{% endblock page_header %}
This simple template provides the generic 404 error page information but is
styled to match the rest of the site.
Make another file called 500.html  using the following code:
500.html
{% extends "learning_logs/base.html" %}
{% block page_header %}  <h2>There has been an internal error. (500)</h2>
{% endblock page_header %}
These new files require a slight change to settings.py .
settings.py
--snip--
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.D
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        --snip--
    