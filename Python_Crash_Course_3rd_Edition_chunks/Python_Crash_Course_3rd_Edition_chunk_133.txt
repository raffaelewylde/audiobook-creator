  loop immediately without running any remaining code in
the loop, regardless of the results of any conditional test, use the break
statement. The break  statement directs the flow of your program; you can
use it to control which lines of code are executed and which aren’ t, so the
program only executes code that you want it to, when you want it to.
For example, consider a program that asks the user about places they’ve
visited. We can stop the while  loop in this program by calling break  as
soon as the user enters the 'quit'  value:
cities.py
prompt = "\nPlease enter the name of a city you have 
prompt += "\n(Enter 'quit' when you are finished.) "
❶ while True:
    city = input(prompt)
    if city == 'quit':
        break
    else:
        print(f"I'd love to go to {city.title()}!")A loop that starts with while True  ❶ will run forever unless it reaches a
break  statement. The loop in this program continues asking the user to
enter the names of cities they’ve been to until they enter 'quit' . When
they enter 'quit' , the break  statement runs, causing Python to exit the
loop:
Please enter the name of a city you have visited:
(Enter 'quit' when you are finished.) New York
I'd love to go to New York!
Please enter the name of a city you have visited:
(Enter 'quit' when you are finished.) San Francisco
I'd love to go to San Francisco!
Please enter the name of a city you have visited:
(Enter 'quit' when you are finished.) quit
NOTE
You can use the break  statement in any of Python’ s loops. For
example, you could use break  to quit a for  loop that’ s working
through a list or a dictionary .Using continue in a Loop
Rather than breaking out of a loop entirely without executing the rest of its
code, you can use the continue  statement to return to the beginning of
the loop, based on the result of a conditional test. For example, consider a
loop that counts from 1 to 10 but prints only the odd numbers in that range:
counting.py
current_number = 0
while current_number < 10