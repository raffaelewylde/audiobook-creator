or event in pygame.event.get():
            --snip--
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RIGHT:
                    self.ship.moving_right = True
                elif event.key == pygame.K_LEFT:
                    self.ship.moving_left = True
            elif event.type == pygame.KEYUP:
                if event.key == pygame.K_RIGHT:
                    self.ship.moving_right = False
                elif event.key == pygame.K_LEFT:
                    self.ship.moving_left = False
If a KEYDOWN  event occurs for the K_LEFT  key, we set moving_left
to True . If a KEYUP  event occurs for the K_LEFT  key, we set
moving_left  to False . We can use elif  blocks here because each
event is connected to only one key . If the player presses both keys at once,
two separate events will be detected.
When you run alien_invasion.py  now , you should be able to move the ship
continuously to the right and left. If you hold down both keys, the shipshould stop moving.
Next, we’ll further refine the ship’ s movement. Let’ s adjust the ship’ s speed
and limit how far the ship can move so it can’ t disappear of f the sides of the
screen.
Adjusting the Ship’ s Speed
Currently , the ship moves one pixel per cycle through the while  loop, but
we can take finer control of the ship’ s speed by adding a ship_speed
attribute to the Settings  class. We’ll use this attribute to determine how
far to move the ship on each pass through the loop. Here’ s the new attribute
in settings.py :
settings.py
class Settings:
    """A class to store all settings for Alien Invasi
    def __init__(self):
        --snip--
        # Ship settings
        self.ship_speed = 1.5We set the initial value of ship_speed  to 1.5 . When the ship moves
now, its position is adjusted by 1.5 pixels (rather than 1 pixel) on each pass
through the loop.
We’re using a float for the speed setting to give us finer control of the ship’ s
speed when we increase the tempo of the game