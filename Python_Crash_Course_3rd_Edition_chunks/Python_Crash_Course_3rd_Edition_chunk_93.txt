 test evaluates to
True , Python executes the code following the if statement. If the test
evaluates to False , Python ignores the code following the if statement.
Let’s say we have a variable representing a person’ s age, and we want to
know if that person is old enough to vote. The following code tests whether
the person can vote:
voting.pyage = 19
if age >= 18:
    print("You are old enough to vote!")
Python checks to see whether the value of age  is greater than or equal to
18. It is, so Python executes the indented print()  call:
You are old enough to vote!
Indentation plays the same role in if statements as it did in for  loops.
All indented lines after an if statement will be executed if the test passes,
and the entire block of indented lines will be ignored if the test does not
pass.
You can have as many lines of code as you want in the block following the
if statement. Let’ s add another line of output if the person is old enough
to vote, asking if the individual has registered to vote yet:
age = 19
if age >= 18:
    print("You are old enough to vote!")
    print("Have you registered to vote yet?")The conditional test passes, and both print()  calls are indented, so both
lines are printed:
You are old enough to vote!
Have you registered to vote yet?
If the value of age  is less than 18, this program would produce no output.
if-else Statements
Often, you’ll want to take one action when a conditional test passes and a
different action in all other cases. Python’ s if-else  syntax makes this
possible. An if-else  block is similar to a simple if statement, but the
else  statement allows you to define an action or set of actions that are
executed when the conditional test fails.
We’ll display the same message we had previously if the person is old
enough to vote, but this time we’ll add a message for anyone who is not old
enough to vote:
age = 17
❶ if age >= 18:
    print("You are old enough to vote!")
    print("Have you registered to vote yet?")
❷ else:    pri