tures in a project. Because each new phase typically makes
a project more complex, it’ s best to clean up any cluttered or inef ficientcode. We’ve been refactoring as we go, so there isn’ t any code that we need
to refactor at this point.
Creating the First Alien
Placing one alien on the screen is like placing a ship on the screen. Each
alien’ s behavior is controlled by a class called Alien , which we’ll
structure like the Ship  class. We’ll continue using bitmap images for
simplicity . You can find your own image for an alien or use the one shown
in Figure 13-1 , which is available in the book’ s resources at https://ehmatth
es.github.io/pcc_3e . This image has a gray background, which matches the
screen’ s background color . Make sure you save the image file you choose in
the images  folder .Figure 13-1 : The alien we’ll use to build the fleet
Creating the Alien Class
Now we’ll write the Alien  class and save it as alien.py :
alien.py
import pygame
from pygame.sprite import Sprite
class Alien(Sprite):
    """A class to represent a single alien in the fle
    def __init__(self, ai_game):
        """Initialize the alien and set its starting 
        super().__init__()
        self.screen = ai_game.screen        # Load the alien image and set its rect attri
        self.image = pygame.image.load('images/alien.
        self.rect = self.image.get_rect()
        # Start each new alien near the top left of t
❶         self.rect.x = self.rect.width
        self.rect.y = self.rect.height
        # Store the alien's exact horizontal position
❷         self.x = float(self.rect.x)
Most of this class is like the Ship  class, except for the alien’ s placement
on the screen. We initially place each alien near the top-left corner of the
screen; we add a space to the left of it that’ s equal to the alien’ s width and a
space above it equal to its height ❶, so it’ s easy to see. We’re mainly
concerned with the aliens’  horizontal speed, so we’ll track the horizontal
position of ea