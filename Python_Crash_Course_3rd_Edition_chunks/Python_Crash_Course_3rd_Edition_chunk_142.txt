eferr ed to as ar guments or the variables in a
function call r eferr ed to as parameters.
TRY IT YOURSELF
8-1. Message:  Write a function called display_message()  that prints one sentence telling
everyone what you are learning about in this chapter . Call the function, and make sure the
message displays correctly .
8-2. Favorite Book:  Write a function called favorite_book()  that accepts one parameter ,
title . The function should print a message, such as One of my favorite books is
Alice in Wonderland . Call the function, making sure to include a book title as an ar gument
in the function call.Passing Arguments
Because a function definition can have multiple parameters, a function call
may need multiple ar guments. You can pass ar guments to your functions in
a number of ways. You can use positional ar guments , which need to be in
the same order the parameters were written; keywor d arguments , where
each ar gument consists of a variable name and a value; and lists and
dictionaries of values. Let’ s look at each of these in turn.
Positional Arguments
When you call a function, Python must match each ar gument in the function
call with a parameter in the function definition. The simplest way to do this
is based on the order of the ar guments provided. Values matched up this
way are called positional ar guments .
To see how this works, consider a function that displays information about
pets. The function tells us what kind of animal each pet is and the pet’ s
name, as shown here:
pets.py
❶ def describe_pet(animal_type, pet_name):
    """Display information about a pet."""
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.titl❷ describe_pet('hamster', 'harry')
The definition shows that this function needs a type of animal and the
animal’ s name ❶. When we call describe_pet() , we need to provide
an animal type and a name, in that order . For example, in the function call,
the ar gument 'hamster'  is assigned to the parameter 