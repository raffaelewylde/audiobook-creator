er for each person, and
store each as a value in your dictionary . Print each person’ s name and their favorite number . For
even more fun, poll a few friends and get some actual data for your program.
6-3. Glossary:  A Python dictionary can be used to model an actual dictionary . However , to
avoid confusion, let’ s call it a glossary .
Think of five programming words you’ve learned about in the previous chapters. Use these
words as the keys in your glossary , and store their meanings as values.
Print each word and its meaning as neatly formatted output. You might print the word
followed by a colon and then its meaning, or print the word on one line and then print its
meaning indented on a second line. Use the newline character ( \n) to insert a blank line
between each word-meaning pair in your output.
Looping Through a Dictionary
A single Python dictionary can contain just a few key-value pairs or
millions of pairs. Because a dictionary can contain lar ge amounts of data,
Python lets you loop through a dictionary . Dictionaries can be used to store
information in a variety of ways; therefore, several dif ferent ways exist toloop through them. You can loop through all of a dictionary’ s key-value
pairs, through its keys, or through its values.
Looping Through All Key-V alue Pairs
Before we explore the dif ferent approaches to looping, let’ s consider a new
dictionary designed to store information about a user on a website. The
following dictionary would store one person’ s username, first name, and
last name:
user.py
user_0 = {
    'username': 'efermi',
    'first': 'enrico',
    'last': 'fermi',
    }
You can access any single piece of information about user_0  based on
what you’ve already learned in this chapter . But what if you wanted to see
everything stored in this user ’s dictionary? To do so, you could loop
through the dictionary using a for  loop:
user_0 = {
    'username': 'efermi',
    'first': 'enrico',    'last': 'fermi',
    }
for key, value in user_0