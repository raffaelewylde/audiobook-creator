r programs become much easier to follow . You can go a step further by
storing your functions in a separate file called a module  and then importingthat module into your main program. An import  statement tells Python to
make the code in a module available in the currently running program file.
Storing your functions in a separate file allows you to hide the details of
your program’ s code and focus on its higher -level logic. It also allows you
to reuse functions in many dif ferent programs. When you store your
functions in separate files, you can share those files with other programmers
without having to share your entire program. Knowing how to import
functions also allows you to use libraries of functions that other
programmers have written.
There are several ways to import a module, and I’ll show you each of these
briefly .
Importing an Entir e Module
To start importing functions, we first need to create a module. A module  is a
file ending in .py that contains the code you want to import into your
program. Let’ s make a module that contains the function make_pizza() .
To make this module, we’ll remove everything from the file pizza.py  except
the function make_pizza() :
pizza.py
def make_pizza(size, *toppings):
    """Summarize the pizza we are about to make."""    print(f"\nMaking a {size}-inch pizza with the fol
    for topping in toppings:
        print(f"- {topping}")
Now we’ll make a separate file called making_pizzas.py  in the same
directory as pizza.py . This file imports the module we just created and then
makes two calls to make_pizza() :
making_pizzas.py
import pizza
❶ pizza.make_pizza(16, 'pepperoni')
pizza.make_pizza(12, 'mushrooms', 'green peppers', 'e
When Python reads this file, the line import pizza  tells Python to open
the file pizza.py  and copy all the functions from it into this program. You
don’t actually see code being copied between files because Python copies
the code behind the scenes, just before the program runs. All you need to
kn