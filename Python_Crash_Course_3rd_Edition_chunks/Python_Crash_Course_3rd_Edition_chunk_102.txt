g}.")
❸     else:
        print(f"Sorry, we don't have {requested_toppi
print("\nFinished making your pizza!")
First, we define a list of available toppings at this pizzeria. Note that this
could be a tuple if the pizzeria has a stable selection of toppings. Then, we
make a list of toppings that a customer has requested. There’ s an unusualrequest for a topping in this example: 'french fries'  ❶. Next we loop
through the list of requested toppings. Inside the loop, we check to see if
each requested topping is actually in the list of available toppings ❷. If it is,
we add that topping to the pizza. If the requested topping is not in the list of
available toppings, the else  block will run ❸. The else  block prints a
message telling the user which toppings are unavailable.
This code syntax produces clean, informative output:
Adding mushrooms.
Sorry, we don't have french fries.
Adding extra cheese.
Finished making your pizza!
In just a few lines of code, we’ve managed a real-world situation pretty
effectively!TRY IT YOURSELF
5-8. Hello Admin:  Make a list of five or more usernames, including the name 'admin' .
Imagine you are writing code that will print a greeting to each user after they log in to a website.
Loop through the list, and print a greeting to each user .
If the username is 'admin' , print a special greeting, such as Hello admin, would you like
to see a status r eport?
Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.
5-9. No Users: Add an if test to hello_admin.py  to make sure the list of users is not empty .
If the list is empty , print the message We need to find some users!
Remove all of the usernames from your list, and make sure the correct message is printed.
5-10. Checking Usernames:  Do the following to create a program that simulates how websites
ensure that everyone has a unique username.
Make a list of five or more usernames called current_users .
Make another list of five usernames called new_users . Mak