a built-in feature
of the language that helps you do exactly what you want with your data.NOTE
You can build a set dir ectly using braces and separating the
elements with commas:
>>> languages = {'python', 'rust', 'python', 'c
>>> languages
{'rust', 'python', 'c'}
It’s easy to mistake sets for dictionaries because they’r e both
wrapped in braces. When you see braces but no key-value pairs,
you’r e probably looking at a set. Unlike lists and dictionaries, sets
do not r etain items in any specific or der.TRY IT YOURSELF
6-4. Glossary 2: Now that you know how to loop through a dictionary , clean up the code from
Exercise 6-3  (page 99 ) by replacing your series of print()  calls with a loop that runs through
the dictionary’ s keys and values. When you’re sure that your loop works, add five more Python
terms to your glossary . When you run your program again, these new words and meanings
should automatically be included in the output.
6-5. Rivers:  Make a dictionary containing three major rivers and the country each river runs
through. One key-value pair might be 'nile': 'egypt' .
Use a loop to print a sentence about each river , such as The Nile runs thr ough Egypt .
Use a loop to print the name of each river included in the dictionary .
Use a loop to print the name of each country included in the dictionary .
6-6. Polling: Use the code in favorite_languages.py  (page 96 ).
Make a list of people who should take the favorite languages poll. Include some names that
are already in the dictionary and some that are not.
Loop through the list of people who should take the poll. If they have already taken the poll,
print a message thanking them for responding. If they have not yet taken the poll, print a
message inviting them to take the poll.
Nesting
Sometimes you’ll want to store multiple dictionaries in a list, or a list of
items as a value in a dictionary . This is called nesting . You can nest
dictionaries inside a list, a list of items inside a dictionary , or even adic