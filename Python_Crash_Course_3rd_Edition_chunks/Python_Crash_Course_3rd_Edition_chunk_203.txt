o the file. Later in this chapter ,
you’ll learn to check whether a file exists using pathlib .
TRY IT YOURSELF
10-4. Guest:  Write a program that prompts the user for their name. When they respond, write
their name to a file called guest.txt .
10-5. Guest Book:  Write a while  loop that prompts users for their name. Collect all the
names that are entered, and then write these names to a file called guest_book.txt . Make sure
each entry appears on a new line in the file.Exceptions
Python uses special objects called exceptions  to manage errors that arise
during a program’ s execution. Whenever an error occurs that makes Python
unsure of what to do next, it creates an exception object. If you write code
that handles the exception, the program will continue running. If you don’ t
handle the exception, the program will halt and show a traceback , which
includes a report of the exception that was raised.
Exceptions are handled with try -except  blocks. A try-except  block
asks Python to do something, but it also tells Python what to do if an
exception is raised. When you use try -except  blocks, your programs
will continue running even if things start to go wrong. Instead of
tracebacks, which can be confusing for users to read, users will see friendly
error messages that you’ve written.
Handling the Zer oDivisionErr or Exception
Let’s look at a simple error that causes Python to raise an exception. You
probably know that it’ s impossible to divide a number by zero, but let’ s ask
Python to do it anyway:
division_calculator .pyprint(5/0)
Python can’ t do this, so we get a traceback:
Traceback (most recent call last):
  File "division_calculator.py", line 1, in <module>
    print(5/0)
          ~^~
❶ ZeroDivisionError: division by zero
The error reported in the traceback, ZeroDivisionError , is an
exception object ❶. Python creates this kind of object in response to a
situation where it can’ t do what we ask it to. When this happens, Python
stops the program and tells us 