creen_heigh
            while current_x < (self.settings.screen_w
❹                 self._create_alien(current_x, current                current_x += 2 * alien_width
❺             # Finished a row; reset x value, and incr
            current_x = alien_width
            current_y += 2 * alien_height
We’ll need to know the alien’ s height in order to place rows, so we grab the
alien’ s width and height using the size  attribute of an alien rect  ❶. A
rect ’s size  attribute is a tuple containing its width and height.
Next, we set the initial x- and y-values for the placement of the first alien in
the fleet ❷. We place it one alien width in from the left and one alien height
down from the top. Then we define the while  loop that controls how
many rows are placed onto the screen ❸. As long as the y-value for the next
row is less than the screen height, minus three alien heights, we’ll keep
adding rows. (If this doesn’ t leave the right amount of space, we can adjust
it later .)
We call _create_alien() , and pass it the y-value as well as its x-
position ❹. We’ll modify _create_alien()  in a moment.
Notice the indentation of the last two lines of code ❺. They’re inside the
outer while  loop, but outside the inner while  loop. This block runs
after the inner loop is finished; it runs once after each row is created. After
each row has been added, we reset the value of current_x  so the firstalien in the next row will be placed at the same position as the first alien in
the previous rows. Then we add two alien heights to the current value of
current_y , so the next row will be placed further down the screen.
Indentation is really important here; if you don’ t see the correct fleet when
you run alien_invasion.py  at the end of this section, check the indentation
of all the lines in these nested loops.
We need to modify _create_alien()  to set the vertical position of the
alien correctly:
    def _create_alien(self, x_position, y_position):
        """Create an alien and plac