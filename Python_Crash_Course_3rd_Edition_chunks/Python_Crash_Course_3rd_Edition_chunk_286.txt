move on. If the player
has no ships left, we set game_active  to False .
Identifying When Parts of the Game Should Run
We need to identify the parts of the game that should always run and the
parts that should run only when the game is active:
alien_invasion.py    def run_game(self):
        """Start the main loop for the game."""
        while True:
            self._check_events()
            if self.game_active:
                self.ship.update()
                self._update_bullets()
                self._update_aliens()
            self._update_screen()
            self.clock.tick(60)
In the main loop, we always need to call _check_events() , even if the
game is inactive. For example, we still need to know if the user presses Q to
quit the game or clicks the button to close the window . We also continue
updating the screen so we can make changes to the screen while waiting to
see whether the player chooses to start a new game. The rest of the function
calls need to happen only when the game is active, because when the game
is inactive, we don’ t need to update the positions of game elements.
Now when you play Alien Invasion , the game should freeze when you’ve
used up all your ships.TRY IT YOURSELF
13-6. Game Over:  In Sideways Shooter , keep track of the number of times the ship is hit and
the number of times an alien is hit by the ship. Decide on an appropriate condition for ending
the game, and stop the game when this situation occurs.
Summary
In this chapter , you learned how to add a lar ge number of identical elements
to a game by creating a fleet of aliens. You used nested loops to create a
grid of elements, and you made a lar ge set of game elements move by
calling each element’ s update()  method. You learned to control the
direction of objects on the screen and to respond to specific situations, such
as when the fleet reaches the edge of the screen. You detected and
responded to collisions when bullets hit aliens and aliens hit the ship. You
also lear