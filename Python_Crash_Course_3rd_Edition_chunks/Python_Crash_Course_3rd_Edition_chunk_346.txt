ictionary is a "coordinates"  key,
and the first two values in this list are the longitude and latitude. Here’ s how
we’ll pull this data:
eq_explor e_data.py
--snip--
all_eq_dicts = all_eq_data['features']
mags, lons, lats = [], [], []
for eq_dict in all_eq_dicts:
    mag = eq_dict['properties']['mag']
❶     lon = eq_dict['geometry']['coordinates'][0]
    lat = eq_dict['geometry']['coordinates'][1]
    mags.append(mag)
    lons.append(lon)
    lats.append(lat)
print(mags[:10])print(lons[:5])
print(lats[:5])
We make empty lists for the longitudes and latitudes. The code
eq_dict['geometry']  accesses the dictionary representing the
geometry element of the earthquake ❶. The second key ,
'coordinates' , pulls the list of values associated with
'coordinates' . Finally , the 0 index asks for the first value in the list
of coordinates, which corresponds to an earthquake’ s longitude.
When we print the first 5 longitudes and latitudes, the output shows that
we’re pulling the correct data:
[1.6, 1.6, 2.2, 3.7, 2.92000008, 1.4, 4.6, 4.5, 1.9, 
[-150.7585, -153.4716, -148.7531, -159.6267, -155.248
[61.7591, 59.3152, 63.1633, 54.5612, 18.7551670074463
With this data, we can move on to mapping each earthquake.
Building a World Map
Using the information we’ve pulled so far , we can build a simple world
map. Although it won’ t look presentable yet, we want to make sure theinformation is displayed correctly before focusing on style and presentation
issues. Here’ s the initial map:
eq_world_map.py
from pathlib import Path
import json
import plotly.express as px
--snip--
for eq_dict in all_eq_dicts:
    --snip--
title = 'Global Earthquakes'
❶ fig = px.scatter_geo(lat=lats, lon=lons, title=title)
fig.show()
We import plotly.express  with the alias px, just as we did in Chapter
15. The scatter_geo()  function ❶ allows you to overlay a scatterplot
of geographic data on a map. In the simplest use of this chart type, you only
need to provide a list of latitudes and a list of longitudes. 