he other pages in the project. You can
easily correct over -restricted access, and it’ s less dangerous than leaving
sensitive pages unrestricted.
In Learning Log, we’ll keep the home page and the registration page
unrestricted. We’ll restrict access to every other page.Here’ s learning_logs/views.py  with @login_required  decorators
applied to every view except index() :
learning_logs/views.py
--snip--
@login_required
def topics(request):
    --snip--
@login_required
def topic(request, topic_id):
    --snip--
@login_required
def new_topic(request):
    --snip--
@login_required
def new_entry(request, topic_id):
    --snip--
@login_required
def edit_entry(request, entry_id):
    --snip--Try accessing each of these pages while logged out; you should be
redirected back to the login page. You’ll also be unable to click links to
pages such as new_topic . But if you enter the URL
http://localhost:8000/new_topic/ , you’ll be redirected to the login page. You
should restrict access to any URL  that’ s publicly accessible and relates to
private user data.
Connecting Data to Certain Users
Next, we need to connect the data to the user who submitted it. We only
need to connect the data highest in the hierarchy to a user , and the lower -
level data will follow . In Learning Log, topics are the highest level of data
in the app, and all entries are connected to a topic. As long as each topic
belongs to a specific user , we can trace the ownership of each entry in the
database.
We’ll modify the Topic  model by adding a foreign key relationship to a
user. We’ll then have to migrate the database. Finally , we’ll modify some of
the views so they only show the data associated with the currently logged-in
user.
Modifying the Topic Model
The modification to models.py  is just two lines:
models.pyfrom django.db import models
from django.contrib.auth.models import User
class Topic(models.Model):
   """A topic the user is learning about."""
    text = models.CharField(max_length=200)
    d