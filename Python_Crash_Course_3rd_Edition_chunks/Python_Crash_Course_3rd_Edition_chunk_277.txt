 to
change the direction of the fleet once.
Here are the changes to _update_aliens() :
alien_invasion.py
    def _update_aliens(self):
        """Check if the fleet is at an edge, then upd
        self._check_fleet_edges()
        self.aliens.update()
We’ve modified the method by calling _check_fleet_edges()  before
updating each alien’ s position.
When you run the game now , the fleet should move back and forth between
the edges of the screen and drop down every time it hits an edge. Now wecan start shooting down aliens and watch for any aliens that hit the ship or
reach the bottom of the screen.
TRY IT YOURSELF
13-3. Raindr ops: Find an image of a raindrop and create a grid of raindrops. Make the
raindrops fall toward the bottom of the screen until they disappear .
13-4. Steady Rain:  Modify your code in Exercise 13-3 so when a row of raindrops disappears
off the bottom of the screen, a new row appears at the top of the screen and begins to fall.
Shooting Aliens
We’ve built our ship and a fleet of aliens, but when the bullets reach the
aliens, they simply pass through because we aren’ t checking for collisions.
In game programming, collisions  happen when game elements overlap. To
make the bullets shoot down aliens, we’ll use the function
sprite.groupcollide()  to look for collisions between members of
two groups.
Detecting Bullet Collisions
We want to know right away when a bullet hits an alien so we can make an
alien disappear as soon as it’ s hit. To do this, we’ll look for collisionsimmediately after updating the position of all the bullets.
The sprite.groupcollide()  function compares the rect s of each
element in one group with the rect s of each element in another group. In
this case, it compares each bullet’ s rect  with each alien’ s rect  and
returns a dictionary containing the bullets and aliens that have collided.
Each key in the dictionary will be a bullet, and the corresponding value will
be the alien that was hit. (W e’ll also use this dictionary wh