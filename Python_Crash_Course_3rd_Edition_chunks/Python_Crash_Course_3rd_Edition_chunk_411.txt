atches the URL
http://localhost:8000/accounts/login/ . When Django reads this URL, the
word accounts  tells Django to look in accounts/urls.py , and login  tells it to
send requests to Django’ s default login  view .
The login Template
When the user requests the login page, Django will use a default view
function, but we still need to provide a template for the page. The default
authentication views look for templates inside a folder called registration ,
so we’ll need to make that folder . Inside the ll_pr oject/accounts/  directory ,
make a directory called templates ; inside that, make another directory called
registration . Here’ s the login.html  template, which should be saved in
ll_pr oject/accounts/templates/r egistration :
login.html
{% extends 'learning_logs/base.html' %}
{% block content %}
❶   {% if form.errors %}
    <p>Your username and password didn't match. Pleas  {% endif %}
❷   <form action="{% url 'accounts:login' %}" method='p
    {% csrf_token %}
❸     {{ form.as_div }}
❹     <button name="submit">Log in</button>
  </form>
{% endblock content %}
This template extends base.html  to ensure that the login page will have the
same look and feel as the rest of the site. Note that a template in one app
can inherit from a template in another app.
If the form’ s errors  attribute is set, we display an error message ❶,
reporting that the username and password combination doesn’ t match
anything stored in the database.
We want the login view to process the form, so we set the action
argument as the URL  of the login page ❷. The login view sends a form
object to the template, and it’ s up to us to display the form ❸ and add a
submit button ❹.The LOGIN_REDIRECT_URL  Setting
Once a user logs in successfully , Django needs to know where to send that
user. We control this in the settings file.
Add the following code to the end of settings.py :
settings.py
--snip--
# My settings.
LOGIN_REDIRECT_URL = 'learning_logs:index'
With all the default settings in setting