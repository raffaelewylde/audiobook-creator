   def _check_events(self):
        """Respond to keypresses and mouse events."""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)
    def _check_keydown_events(self, event):
        """Respond to keypresses."""
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = True
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = True
    def _check_keyup_events(self, event):
        """Respond to key releases."""
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = False
We make two new helper methods: _check_keydown_events()  and
_check_keyup_events() . Each needs a self  parameter and an
event  parameter . The bodies of these two methods are copied from
_check_events() , and we’ve replaced the old code with calls to the
new methods. The _check_events()  method is simpler now with this
cleaner code structure, which will make it easier to develop further
responses to player input.
Pressing Q to Quit
Now that we’re responding to keypresses ef ficiently , we can add another
way to quit the game. It gets tedious to click the X at the top of the game
window to end the game every time you test a new feature, so we’ll add a
keyboard shortcut to end the game when the player presses Q:
alien_invasion.py
    def _check_keydown_events(self, event):
        --snip--
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = True        elif event.key == pygame.K_q:
            sys.exit()
In _check_keydown_events() , we add a new block that ends the game
when the player presses Q. Now , when testing, you can press Q to close the
game instead of using your cursor to close