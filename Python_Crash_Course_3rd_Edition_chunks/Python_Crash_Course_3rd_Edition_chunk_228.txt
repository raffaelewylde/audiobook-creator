ted_name == 'Wolfgang Amadeus Mozart
We name this new function test_first_last_middle_name() . The
function name must start with test_  so the function runs automatically
when we run pytest . We name the function to make it clear which
behavior of get_formatted_name()  we’re testing. As a result, if the
test fails, we’ll know right away what kinds of names are af fected.To test the function, we call get_formatted_name()  with a first, last,
and middle name ❶, and then we make an assertion ❷ that the returned full
name matches the full name (first, middle, and last) that we expect. When
we run pytest  again, both tests pass:
$ pytest
========================= test session starts =======
--snip--
collected 2 items
❶ test_name_function.py ..                             
========================== 2 passed in 0.01s ========
The two dots ❶ indicate that two tests passed, which is also clear from the
last line of output. This is great! We now know that the function still works
for names like Janis Joplin , and we can be confident that it will work
for names like Wolfgang Amadeus Mozart  as well.TRY IT YOURSELF
11-1. City , Country:  Write a function that accepts two parameters: a city name and a country
name. The function should return a single string of the form City, Country , such as
Santiago, Chile . Store the function in a module called city_functions.py , and save this file
in a new folder so pytest  won’ t try to run the tests we’ve already written.
Create a file called test_cities.py  that tests the function you just wrote. Write a function called
test_city_country()  to verify that calling your function with values such as
'santiago'  and 'chile'  results in the correct string. Run the test, and make sure
test_city_country()  passes.
11-2. Population:  Modify your function so it requires a third parameter , population . It
should now return a single string of the form City, Country – population xxx , such as
Santiago, Chile – population 5000000 . Run the test aga