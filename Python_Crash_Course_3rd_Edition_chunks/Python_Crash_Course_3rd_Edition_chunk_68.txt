ng? Usually , you’ll
want to summarize a block of output or move on to other work that your
program must accomplish.
Any lines of code after the for  loop that are not indented are executed
once without repetition. Let’ s write a thank you to the group of magicians
as a whole, thanking them for putting on an excellent show . To display this
group message after all of the individual messages have been printed, we
place the thank you message after the for  loop, without indentation:magicians = ['alice', 'david', 'carolina']
for magician in magicians:
    print(f"{magician.title()}, that was a great tric
    print(f"I can't wait to see your next trick, {mag
print("Thank you, everyone. That was a great magic sh
The first two calls to print()  are repeated once for each magician in the
list, as you saw earlier . However , because the last line is not indented, it’ s
printed only once:
Alice, that was a great trick!
I can't wait to see your next trick, Alice.
David, that was a great trick!
I can't wait to see your next trick, David.
Carolina, that was a great trick!
I can't wait to see your next trick, Carolina.
Thank you, everyone. That was a great magic show!
When you’re processing data using a for  loop, you’ll find that this is a
good way to summarize an operation that was performed on an entire
dataset. For example, you might use a for  loop to initialize a game byrunning through a list of characters and displaying each character on the
screen. You might then write some additional code after this loop that
displays a Play Now  button after all the characters have been drawn to the
screen.
Avoiding Indentation Errors
Python uses indentation to determine how a line, or group of lines, is related
to the rest of the program. In the previous examples, the lines that printed
messages to individual magicians were part of the for  loop because they
were indented. Python’ s use of indentation makes code very easy to read.
Basically , it uses whitespace to force you to write n