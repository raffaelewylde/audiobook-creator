a multiline string. The first line
assigns the first part of the message to the variable prompt . In the second
line, the operator += takes the string that was assigned to prompt  and
adds the new string onto the end.
The prompt now spans two lines, again with space after the question mark
for clarity:
If you share your name, we can personalize the messag
What is your first name? Eric
Hello, Eric!
Using int() to Accept Numerical Input
When you use the input()  function, Python interprets everything the
user enters as a string. Consider the following interpreter session, which
asks for the user ’s age:
>>> age = input("How old are you? ")
How old are you? 21
>>> age
'21'The user enters the number 21, but when we ask Python for the value of
age , it returns '21' , the string representation of the numerical value
entered. We know Python interpreted the input as a string because the
number is now enclosed in quotes. If all you want to do is print the input,
this works well. But if you try to use the input as a number , you’ll get an
error:
>>> age = input("How old are you? ")
How old are you? 21
❶ >>> age >= 18
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
❷ TypeError: '>=' not supported between instances of 's
When you try to use the input to do a numerical comparison ❶, Python
produces an error because it can’ t compare a string to an integer: the string
'21'  that’ s assigned to age  can’ t be compared to the numerical value
18 ❷.
We can resolve this issue by using the int()  function, which converts the
input string to a numerical value. This allows the comparison to run
successfully:
>>> age = input("How old are you? ")
How old are you? 21❶ >>> age = int(age)
>>> age >= 18
True
In this example, when we enter 21 at the prompt, Python interprets the
number as a string, but the value is then converted to a numerical
representation by int()  ❶. Now Python can run the conditional test: it
compares age  (which now represents the numerical value