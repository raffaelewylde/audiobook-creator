s
as the game progresses or as needed to refine the game’ s behavior . Once a
bullet is fired, we never change the value of its x-coordinate, so it will travel
vertically in a straight line even if the ship moves.
When we want to draw a bullet, we call draw_bullet() . The
draw.rect()  function fills the part of the screen defined by the bullet’ s
rect  with the color stored in self.color  ❸.
Storing Bullets in a Gr oup
Now that we have a Bullet  class and the necessary settings defined, we
can write code to fire a bullet each time the player presses the spacebar .
We’ll create a group in AlienInvasion  to store all the active bullets sowe can manage the bullets that have already been fired. This group will be
an instance of the pygame.sprite.Group  class, which behaves like a
list with some extra functionality that’ s helpful when building games. We’ll
use this group to draw bullets to the screen on each pass through the main
loop and to update each bullet’ s position.
First, we’ll import the new Bullet  class:
alien_invasion.py
--snip--
from ship import Ship
from bullet import Bullet
Next we’ll create the group that holds the bullets in __init__() :
alien_invasion.py
    def __init__(self):
        --snip--
        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()
Then we need to update the position of the bullets on each pass through the
while  loop:alien_invasion.py
    def run_game(self):
        """Start the main loop for the game."""
        while True:
            self._check_events()
            self.ship.update()
            self.bullets.update()
            self._update_screen()
            self.clock.tick(60)
When you call update()  on a group, the group automatically calls
update()  for each sprite in the group. The line
self.bullets.update()  calls bullet.update()  for each bullet
we place in the group bullets .
Firing Bullets
In AlienInvasion , we need to modify _check_keydown_events()
to fire a bullet when the player presses the spac