ement a discount for seniors, you could
add one more conditional test to the code to determine whether someonequalifies for the senior discount. Let’ s say that anyone 65 or older pays half
the regular admission, or $20:
age = 12
if age < 4:
    price = 0
elif age < 18:
    price = 25
elif age < 65:
    price = 40
else:
    price = 20
print(f"Your admission cost is ${price}.")
Most of this code is unchanged. The second elif  block now checks to
make sure a person is less than age 65 before assigning them the full
admission rate of $40. Notice that the value assigned in the else  block
needs to be changed to $20, because the only ages that make it to this block
are for people 65 or older .
Omitting the else Block
Python does not require an else  block at the end of an if-elif  chain.
Sometimes, an else  block is useful. Other times, it’ s clearer to use anadditional elif  statement that catches the specific condition of interest:
age = 12
if age < 4:
    price = 0
elif age < 18:
    price = 25
elif age < 65:
    price = 40
elif age >= 65:
    price = 20
print(f"Your admission cost is ${price}.")
The final elif  block assigns a price of $20 when the person is 65 or
older , which is a little clearer than the general else  block. With this
change, every block of code must pass a specific test in order to be
executed.
The else  block is a catchall statement. It matches any condition that
wasn’ t matched by a specific if or elif  test, and that can sometimes
include invalid or even malicious data. If you have a specific final condition
you’re testing for , consider using a final elif  block and omit the else
block. As a result, you’ll be more confident that your code will run only
under the correct conditions.Testing Multiple Conditions
The if-elif -else  chain is powerful, but it’ s only appropriate to use
when you just need one test to pass. As soon as Python finds one test that
passes, it skips the rest of the tests. This behavior is beneficial, because it’ s
efficient