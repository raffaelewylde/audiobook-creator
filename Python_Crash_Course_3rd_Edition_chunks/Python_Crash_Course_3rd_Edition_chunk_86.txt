list to work with a subset of items and how to copy lists properly using a
slice. You also learned about tuples, which provide a degree of protection to
a set of values that shouldn’ t change, and how to style your increasingly
complex code to make it easy to read.
In Chapter 5 , you’ll learn to respond appropriately to dif ferent conditions by
using if statements. You’ll learn to string together relatively complex sets
of conditional tests to respond appropriately to exactly the kind of situation
or information you’re looking for . You’ll also learn to use if statements
while looping through a list to take specific actions with selected elements
from a list.5
IF STATEMENTS
Programming often involves examining a set of conditions
and deciding which action to take based on those conditions.
Python’ s if statement allows you to examine the current
state of a program and respond appropriately to that state.
In this chapter , you’ll learn to write conditional tests, which allow you to
check any condition of interest. You’ll learn to write simple if statements,
and you’ll learn how to create a more complex series of if statements to
identify when the exact conditions you want are present. You’ll then apply
this concept to lists, so you’ll be able to write a for  loop that handles most
items in a list one way but handles certain items with specific values in a
different way .
A Simple Example
The following example shows how if tests let you respond to special
situations correctly . Imagine you have a list of cars and you want to print
out the name of each car . Car names are proper names, so the names of
most cars should be printed in title case. However , the value 'bmw'  shouldbe printed in all uppercase. The following code loops through a list of car
names and looks for the value 'bmw' . Whenever the value is 'bmw' , it’s
printed in uppercase instead of title case:
cars.py
cars = ['audi', 'bmw', 'subaru', 'toyota']
for car in cars:
❶     if car == 'bmw':
        print(