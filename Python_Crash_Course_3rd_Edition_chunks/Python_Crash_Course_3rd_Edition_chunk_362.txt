o the list hover_texts .
In the px.bar()  call, we add the hover_name  argument and pass it
hover_texts  ❹. This is the same approach we used to customize the
label for each dot in the map of global earthquake activity . As Plotly creates
each bar , it will pull labels from this list and only display them when the
viewer hovers over a bar . Figure 17-3  shows one of these custom tooltips.Figure 17-3 : Hovering over a bar shows the pr oject’ s owner and description.
Adding Clickable Links
Because Plotly allows you to use HTML  on text elements, we can easily
add links to a chart. Let’ s use the x-axis labels as a way to let the viewer
visit any project’ s home page on GitHub. We need to pull the URLs from
the data and use them when generating the x-axis labels:
python_r epos_visual.py
--snip--
# Process repository information.repo_dicts = response_dict['items']
❶ repo_links, stars, hover_texts = [], [], []
for repo_dict in repo_dicts:
    # Turn repo names into active links.
    repo_name = repo_dict['name']
❷     repo_url = repo_dict['html_url']
❸     repo_link = f"<a href='{repo_url}'>{repo_name}</a
    repo_links.append(repo_link)
    stars.append(repo_dict['stargazers_count'])
    --snip--
# Make visualization.
title = "Most-Starred Python Projects on GitHub"
labels = {'x': 'Repository', 'y': 'Stars'}
fig = px.bar(x=repo_links, y=stars, title=title, labe
        hover_name=hover_texts)
fig.update_layout(title_font_size=28, xaxis_title_fon
        yaxis_title_font_size=20)
fig.show()
We update the name of the list we’re creating from repo_names  to
repo_links  to more accurately communicate the kind of information
we’re putting together for the chart ❶. We then pull the URL  for the project
from repo_dict  and assign it to the temporary variable repo_url  ❷.Next, we generate a link to the project ❸. We use the HTML  anchor tag,
which has the form <a href='URL'>link text</a> , to generate the
link. We then append this link to repo_links .
When we call px.bar() , we