ib.admin',
    --snip--
]
--snip--
Grouping apps together in a project helps keep track of them as the project
grows to include more apps. Here we start a section called My apps ,
which includes only 'learning_logs'  for now . It’s important to place
your own apps before the default apps, in case you need to override any
behavior of the default apps with your own custom behavior .
Next, we need to tell Django to modify the database so it can store
information related to the model Topic . From the terminal, run the
following command:
(ll_env)learning_log$ python manage.py makemigrations
Migrations for 'learning_logs':
  learning_logs/migrations/0001_initial.py
    - Create model Topic
(ll_env)learning_log$
The command makemigrations  tells Django to figure out how to
modify the database so it can store the data associated with any new modelswe’ve defined. The output here shows that Django has created a migration
file called 0001_initial.py . This migration will create a table for the model
Topic  in the database.
Now we’ll apply this migration and have Django modify the database for
us:
(ll_env)learning_log$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, le
Running migrations:
  Applying learning_logs.0001_initial... OK
Most of the output from this command is identical to the output from the
first time we issued the migrate  command. We need to check the last line
in this output, where Django confirms that the migration for
learning_logs  worked OK.
Whenever we want to modify the data that Learning Log manages, we’ll
follow these three steps: modify models.py , call makemigrations  on
learning_logs , and tell Django to migrate  the project.The Django Admin Site
Django makes it easy to work with your models through its admin site.
Django’ s admin site  is only meant to be used by the site’ s administrators;
it’s not meant for regular users. In this section, we’ll set up the admin site
and use it to add some topics th