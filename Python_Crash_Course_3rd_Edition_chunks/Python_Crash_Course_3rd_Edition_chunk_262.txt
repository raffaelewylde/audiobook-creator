ebar . We don’ t need to
change _check_keyup_events()  because nothing happens when the
spacebar is released. We also need to modify _update_screen()  to
make sure each bullet is drawn to the screen before we call flip() .
There will be a bit of work to do when we fire a bullet, so let’ s write a new
method, _fire_bullet() , to handle this work:alien_invasion.py
    def _check_keydown_events(self, event):
        --snip--
        elif event.key == pygame.K_q:
            sys.exit()
❶         elif event.key == pygame.K_SPACE:
            self._fire_bullet()
    def _check_keyup_events(self, event):
        --snip--
    def _fire_bullet(self):
        """Create a new bullet and add it to the bull
❷         new_bullet = Bullet(self)
❸         self.bullets.add(new_bullet)
    def _update_screen(self):
        """Update images on the screen, and flip to t
        self.screen.fill(self.settings.bg_color)
❹         for bullet in self.bullets.sprites():
            bullet.draw_bullet()
        self.ship.blitme()
        pygame.display.flip()
--snip--We call _fire_bullet()  when the spacebar is pressed ❶. In
_fire_bullet() , we make an instance of Bullet  and call it
new_bullet  ❷. We then add it to the group bullets  using the add()
method ❸. The add()  method is similar to append() , but it’ s written
specifically for Pygame groups.
The bullets.sprites()  method returns a list of all sprites in the group
bullets . To draw all fired bullets to the screen, we loop through the
sprites in bullets  and call draw_bullet()  on each one ❹. We place
this loop before the line that draws the ship, so the bullets don’ t start out on
top of the ship.
When you run alien_invasion.py  now , you should be able to move the ship
right and left and fire as many bullets as you want. The bullets travel up the
screen and disappear when they reach the top, as shown in Figure 12-3 . You
can alter the size, color , and speed of the bullets in settings.py .Figure 12-3 : The ship after firing a serie