es in the name of a city
and its country . The function should return a string formatted like this:
"Santiago, Chile"
Call your function with at least three city-country pairs, and print the values that are returned.
8-7. Album:  Write a function called make_album()  that builds a dictionary describing a
music album. The function should take in an artist name and an album title, and it should return
a dictionary containing these two pieces of information. Use the function to make three
dictionaries representing dif ferent albums. Print each return value to show that the dictionaries
are storing the album information correctly .
Use None  to add an optional parameter to make_album()  that allows you to store the
number of songs on an album. If the calling line includes a value for the number of songs, add
that value to the album’ s dictionary . Make at least one new function call that includes the
number of songs on an album.
8-8. User  Albums:  Start with your program from Exercise 8-7. Write a while  loop that allows
users to enter an album’ s artist and title. Once you have that information, call make_album()
with the user ’s input and print the dictionary that’ s created. Be sure to include a quit value in the
while  loop.Passing a List
You’ll often find it useful to pass a list to a function, whether it’ s a list of
names, numbers, or more complex objects, such as dictionaries. When you
pass a list to a function, the function gets direct access to the contents of the
list. Let’ s use functions to make working with lists more ef ficient.
Say we have a list of users and want to print a greeting to each. The
following example sends a list of names to a function called
greet_users() , which greets each person in the list individually:
greet_users.py
def greet_users(names):
    """Print a simple greeting to each user in the li
    for name in names:
        msg = f"Hello, {name.title()}!"
        print(msg)
usernames = ['hannah', 'ty', 'margot']
greet_users(usernames