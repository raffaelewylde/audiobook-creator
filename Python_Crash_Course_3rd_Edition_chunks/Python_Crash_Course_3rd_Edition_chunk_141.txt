o a Function
If you modify the function greet_user()  slightly , it can greet the user
by name. For the function to do this, you enter username  in the
parentheses of the function’ s definition at def greet_user() . By
adding username  here, you allow the function to accept any value of
username  you specify . The function now expects you to provide a value
for username  each time you call it. When you call greet_user() , you
can pass it a name, such as 'jesse' , inside the parentheses:
def greet_user(username):
    """Display a simple greeting."""
    print(f"Hello, {username.title()}!")
greet_user('jesse')Entering greet_user('jesse')  calls greet_user()  and gives the
function the information it needs to execute the print()  call. The
function accepts the name you passed it and displays the greeting for that
name:
Hello, Jesse!
Likewise, entering greet_user('sarah')  calls greet_user() ,
passes it 'sarah' , and prints Hello, Sarah!  You can call
greet_user()  as often as you want and pass it any name you want to
produce a predictable output every time.
Arguments and Parameters
In the preceding greet_user()  function, we defined greet_user()
to require a value for the variable username . Once we called the function
and gave it the information (a person’ s name), it printed the right greeting.
The variable username  in the definition of greet_user()  is an
example of a parameter , a piece of information the function needs to do its
job. The value 'jesse'  in greet_user('jesse')  is an example of
an ar gument. An argument  is a piece of information that’ s passed from a
function call to a function. When we call the function, we place the value
we want the function to work with in parentheses. In this case the ar gument'jesse'  was passed to the function greet_user() , and the value was
assigned to the parameter username .
NOTE
People sometimes speak of ar guments and parameters
interchangeably . Don’ t be surprised if you see the variables in a
function definition r 