e the commit, when it was made, and the
message recorded. You won’ t always need all of this information, so Git
provides an option to print a simpler version of the log entries:
git_practice$ git log --pretty=oneline
cea13ddc51b885d05a410201a54faf20e0d2e246 (HEAD -> mai
git_practice$
The --pretty=oneline  flag provides the two most important pieces of
information: the reference ID of the commit and the message recorded for
the commit.The Second Commit
To see the real power of version control, we need to make a change to the
project and commit that change. Here we’ll just add another line to
hello_git.py :
hello_git.py
print("Hello Git world!")
print("Hello everyone.")
When we check the status of the project, we’ll see that Git has noticed the
file that changed:
git_practice$ git status
❶ On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be com
  (use "git restore <file>..." to discard changes in 
❷  modified:   hello_git.py
❸ no changes added to commit (use "git add" and/or "git
git_practice$We see the branch we’re working on ❶, the name of the file that was
modified ❷, and that no changes have been committed ❸. Let’ s commit the
change and check the status again:
❶ git_practice$ git commit -am "Extended greeting."
[main 945fa13] Extended greeting.
 1 file changed, 1 insertion(+), 1 deletion(-)
❷ git_practice$ git status
On branch main
nothing to commit, working tree clean
❸ git_practice$ git log --pretty=oneline
945fa13af128a266d0114eebb7a3276f7d58ecd2 (HEAD -> mai
cea13ddc51b885d05a410201a54faf20e0d2e246 Started proj
git_practice$
We make a new commit, passing the -am  flags when we use the command
git commit  ❶. The -a flag tells Git to add all modified files in the
repository to the current commit. (If you create any new files between
commits, reissue the git add .  command to include the new files in the
repository .) The -m flag tells Git to record a message in the log for this
commit.
When we check the project’ s st