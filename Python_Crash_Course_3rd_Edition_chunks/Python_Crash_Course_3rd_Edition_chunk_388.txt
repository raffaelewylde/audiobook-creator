.py file. Django then passes the
request  object to this view function. In this case, we don’ t need to
process any data for the page, so the only code in the function is a call to
render() . The render()  function here passes two ar guments: the
original request  object and a template it can use to build the page. Let’ s
write this template.
Writing a Template
The template defines what the page should look like, and Django fills in the
relevant data each time the page is requested. A template allows you to
access any data provided by the view . Because our view for the home page
provides no data, this template is fairly simple.
Inside the learning_logs  folder , make a new folder called templates . Inside
the templates  folder , make another folder called learning_logs . This might
seem a little redundant (we have a folder named learning_logs  inside a
folder named templates  inside a folder named learning_logs ), but it sets up
a structure that Django can interpret unambiguously , even in the context of
a large project containing many individual apps. Inside the inner
learning_logs  folder , make a new file called index.html . The path to the filewill be learning_log/learning_logs/templates/learning_logs/index.html .
Enter the following code into that file:
index.html
<p>Learning Log</p>
<p>Learning Log helps you keep track of your learning
interested in.</p>
This is a very simple file. If you’re not familiar with HTML, the <p></p>
tags signify paragraphs. The <p>  tag opens a paragraph, and the </p>
tag closes a paragraph. We have two paragraphs: the first acts as a title, and
the second describes what users can do with Learning Log.
Now when you request the project’ s base URL, http://localhost:8000/ , you
should see the page we just built instead of the default Django page. Django
will take the requested URL, and that URL  will match the pattern ''; then
Django will call the function views.index() , which will render the
page using the template contained in ind