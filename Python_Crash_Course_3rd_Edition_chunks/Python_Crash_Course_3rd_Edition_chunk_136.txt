Consider a list of newly registered but unverified users of a website. After
we verify these users, how can we move them to a separate list of
confirmed users? One way would be to use a while  loop to pull users
from the list of unconfirmed users as we verify them and then add them to a
separate list of confirmed users. Here’ s what that code might look like:
confirmed_users.py
# Start with users that need to be verified,
#  and an empty list to hold confirmed users.
❶ unconfirmed_users = ['alice', 'brian', 'candace']
confirmed_users = []
# Verify each user until there are no more unconfirme
#  Move each verified user into the list of confirmed
❷ while unconfirmed_users:
❸     current_user = unconfirmed_users.pop()    print(f"Verifying user: {current_user.title()}")
❹     confirmed_users.append(current_user)
# Display all confirmed users.
print("\nThe following users have been confirmed:")
for confirmed_user in confirmed_users:
    print(confirmed_user.title())
We begin with a list of unconfirmed users ❶ (Alice, Brian, and Candace)
and an empty list to hold confirmed users. The while  loop runs as long as
the list unconfirmed_users  is not empty ❷. Within this loop, the
pop()  method removes unverified users one at a time from the end of
unconfirmed_users  ❸. Because Candace is last in the
unconfirmed_users  list, her name will be the first to be removed,
assigned to current_user , and added to the confirmed_users  list
❹. Next is Brian, then Alice.
We simulate confirming each user by printing a verification message and
then adding them to the list of confirmed users. As the list of unconfirmed
users shrinks, the list of confirmed users grows. When the list of
unconfirmed users is empty , the loop stops and the list of confirmed users is
printed:
Verifying user: Candace
Verifying user: BrianVerifying user: Alice
The following users have been confirmed:
Candace
Brian
Alice
Removing All Instances of Specific Values fr om a List
In Chapter 3,  we used remove()  to remo