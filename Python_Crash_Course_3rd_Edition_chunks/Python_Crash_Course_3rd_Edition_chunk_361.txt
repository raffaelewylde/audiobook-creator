nvention where aspects of a chart
element are connected by underscores. As you become familiar with
Plotly’ s documentation, you’ll start to see consistent patterns in how
different elements of a chart are named and modified. Here we set the title
font size to 28 and the font size for each axis title to 20. The result is
shown in Figure 17-2 .Figure 17-2 : A title has been added to the main chart, and to each axis as well.
Adding Custom Tooltips
In Plotly , you can hover the cursor over an individual bar to show the
information the bar represents. This is commonly called a tooltip , and in
this case, it currently shows the number of stars a project has. Let’ s create a
custom tooltip to show each project’ s description as well as the project’ s
owner .
We need to pull some additional data to generate the tooltips:
python_r epos_visual.py--snip--
# Process repository information.
repo_dicts = response_dict['items']
❶ repo_names, stars, hover_texts = [], [], []
for repo_dict in repo_dicts:
    repo_names.append(repo_dict['name'])
    stars.append(repo_dict['stargazers_count'])
    # Build hover texts.
❷     owner = repo_dict['owner']['login']
    description = repo_dict['description']
❸     hover_text = f"{owner}<br />{description}"
    hover_texts.append(hover_text)
# Make visualization.
title = "Most-Starred Python Projects on GitHub"
labels = {'x': 'Repository', 'y': 'Stars'}
❹ fig = px.bar(x=repo_names, y=stars, title=title, labe
        hover_name=hover_texts)
fig.update_layout(title_font_size=28, xaxis_title_fon
        yaxis_title_font_size=20)
fig.show()
We first define a new empty list, hover_texts , to hold the text we want
to display for each project ❶. In the loop where we process the data, wepull the owner and the description for each project ❷. Plotly allows you to
use HTML  code within text elements, so we generate a string for the label
with a line break ( <br /> ) between the project owner ’s username and the
description ❸. We then append this label t