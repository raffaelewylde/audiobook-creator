t the classes you need into your main program.
Importing a Single Class
Let’s create a module containing just the Car  class. This brings up a subtle
naming issue: we already have a file named car.py in this chapter , but this
module should be named car.py because it contains code representing a car .
We’ll resolve this naming issue by storing the Car  class in a module
named car.py, replacing the car.py file we were previously using. From now
on, any program that uses this module will need a more specific filename,
such as my_car .py. Here’ s car.py with just the code from the class Car :
car.py
❶ """A class that can be used to represent a car."""
class Car:
    """A simple attempt to represent a car."""
    def __init__(self, make, model, year):        """Initialize attributes to describe a car.""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0
    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name
        long_name = f"{self.year} {self.make} {self.m
        return long_name.title()
    def read_odometer(self):
        """Print a statement showing the car's mileag
        print(f"This car has {self.odometer_reading} 
    def update_odometer(self, mileage):
        """
        Set the odometer reading to the given value.
        Reject the change if it attempts to roll the 
        """
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            print("You can't roll back an odometer!")
    def increment_odometer(self, miles):        """Add the given amount to the odometer readi
        self.odometer_reading += miles
We include a module-level docstring that briefly describes the contents of
this module ❶. You should write a docstring for each module you create.
Now we make a separate file called my_car .py. This file will import the
Car  class and then create an instance from that class:
my_car .py
❶ from car impor