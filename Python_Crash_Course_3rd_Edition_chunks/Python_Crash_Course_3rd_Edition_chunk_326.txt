 the chart.The first way to customize a plot with Plotly is to use some optional
parameters in the initial call that generates the plot, in this case,
px.bar() . Here’ s how to add an overall title and a label for each axis:
die_visual.py
--snip--
# Visualize the results.
❶ title = "Results of Rolling One D6 1,000 Times"
❷ labels = {'x': 'Result', 'y': 'Frequency of Result'}
fig = px.bar(x=poss_results, y=frequencies, title=tit
fig.show()
We first define the title that we want, here assigned to title  ❶. To define
axis labels, we write a dictionary ❷. The keys in the dictionary refer to the
labels we want to customize, and the values are the custom labels we want
to use. Here we give the x-axis the label Result  and the y-axis the label
Frequency of Result . The call to px.bar()  now includes the
optional ar guments title  and labels .
Now when the plot is generated it includes an appropriate title and a label
for each axis, as shown in Figure 15-13 .Figure 15-13 : A simple bar chart cr eated with Plotly
Rolling Two Dice
Rolling two dice results in lar ger numbers and a dif ferent distribution of
results. Let’ s modify our code to create two D6 dice to simulate the way we
roll a pair of dice. Each time we roll the pair , we’ll add the two numbers
(one from each die) and store the sum in results . Save a copy of
die_visual.py  as dice_visual.py  and make the following changes:
dice_visual.py
import plotly.express as pxfrom die import Die
# Create two D6 dice.
die_1 = Die()
die_2 = Die()
# Make some rolls, and store results in a list.
results = []
for roll_num in range(1000):
❶     result = die_1.roll() + die_2.roll()
    results.append(result)
# Analyze the results.
frequencies = []
❷ max_result = die_1.num_sides + die_2.num_sides
❸ poss_results = range(2, max_result+1)
for value in poss_results:
    frequency = results.count(value)
    frequencies.append(frequency)
# Visualize the results.
title = "Results of Rolling Two D6 Dice 1,000 Times"
labels = {'x': 'Result',