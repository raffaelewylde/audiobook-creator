import GameStats
from ship import Ship
--snip--
We import the sleep()  function from the time  module in the Python
standard library , so we can pause the game for a moment when the ship is
hit. We also import GameStats .We’ll create an instance of GameStats  in __init__() :
alien_invasion.py
    def __init__(self):
        --snip--
        self.screen = pygame.display.set_mode(
            (self.settings.screen_width, self.setting
        pygame.display.set_caption("Alien Invasion")
        # Create an instance to store game statistics
        self.stats = GameStats(self)
        self.ship = Ship(self)
        --snip--
We make the instance after creating the game window but before defining
other game elements, such as the ship.
When an alien hits the ship, we’ll subtract 1 from the number of ships left,
destroy all existing aliens and bullets, create a new fleet, and reposition the
ship in the middle of the screen. We’ll also pause the game for a moment so
the player can notice the collision and regroup before a new fleet appears.
Let’s put most of this code in a new method called _ship_hit() . We’ll
call this method from _update_aliens()  when an alien hits the ship:alien_invasion.py
    def _ship_hit(self):
        """Respond to the ship being hit by an alien.
        # Decrement ships_left.
❶         self.stats.ships_left -= 1
        # Get rid of any remaining bullets and aliens
❷         self.bullets.empty()
        self.aliens.empty()
        # Create a new fleet and center the ship.
❸         self._create_fleet()
        self.ship.center_ship()
        # Pause.
❹         sleep(0.5)
The new method _ship_hit()  coordinates the response when an alien
hits a ship. Inside _ship_hit() , the number of ships left is reduced by 1
❶, after which we empty the groups bullets  and aliens  ❷.
Next, we create a new fleet and center the ship ❸. (We’ll add the method
center_ship()  to Ship  in a moment.) Then we add a pause after the
updates have been made to all the game el