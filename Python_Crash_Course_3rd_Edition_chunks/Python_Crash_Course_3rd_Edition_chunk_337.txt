nishing touch to the graph by using
shading to show the range between each day’ s high and low temperatures.
To do so, we’ll use the fill_between()  method, which takes a series of
x-values and two series of y-values and fills the space between the two
series of y-values:
sitka_highs_lows.py
--snip--
# Plot the high and low temperatures.plt.style.use('seaborn-v0_8')
fig, ax = plt.subplots()
❶ ax.plot(dates, highs, color='red', alpha=0.5)
ax.plot(dates, lows, color='blue', alpha=0.5)
❷ ax.fill_between(dates, highs, lows, facecolor='blue',
--snip--
The alpha  argument controls a color ’s transparency ❶. An alpha  value
of 0 is completely transparent, and a value of 1 (the default) is completely
opaque. By setting alpha  to 0.5, we make the red and blue plot lines
appear lighter .
We pass fill_between()  the list dates  for the x-values and then the
two y-value series highs  and lows  ❷. The facecolor  argument
determines the color of the shaded region; we give it a low alpha  value of
0.1 so the filled region connects the two data series without distracting from
the information they represent. Figure 16-5  shows the plot with the shaded
region between the highs and lows.Figure 16-5 : The r egion between the two datasets is shaded.
The shading helps make the range between the two datasets immediately
apparent.
Error Checking
We should be able to run the sitka_highs_lows.py  code using data for any
location. But some weather stations collect dif ferent data than others, and
some occasionally malfunction and fail to collect some of the data they’re
supposed to. Missing data can result in exceptions that crash our programs,
unless we handle them properly .
For example, let’ s see what happens when we attempt to generate a
temperature plot for Death Valley , California. Copy the filedeath_valley_2021_simple.csv  to the folder where you’re storing the data
for this chapter ’s programs.
First, let’ s run the code to see the headers that are included in this data file:
death_