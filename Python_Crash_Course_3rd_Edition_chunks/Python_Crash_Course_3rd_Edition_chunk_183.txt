s an optional parameter that sets the battery’ s
size to 40 if no value is provided. The method describe_battery()
has been moved to this class as well ❷.
In the ElectricCar  class, we now add an attribute called
self.battery  ❸. This line tells Python to create a new instance of
Battery  (with a default size of 40, because we’re not specifying a value)
and assign that instance to the attribute self.battery . This will happen
every time the __init__()  method is called; any ElectricCar
instance will now have a Battery  instance created automatically .
We create an electric car and assign it to the variable my_leaf . When we
want to describe the battery , we need to work through the car ’s battery
attribute:my_leaf.battery.describe_battery()
This line tells Python to look at the instance my_leaf , find its battery
attribute, and call the method describe_battery()  that’ s associated
with the Battery  instance assigned to the attribute.
The output is identical to what we saw previously:
2024 Nissan Leaf
This car has a 40-kWh battery.
This looks like a lot of extra work, but now we can describe the battery in
as much detail as we want without cluttering the ElectricCar  class.
Let’s add another method to Battery  that reports the range of the car
based on the battery size:
class Car:
    --snip--
class Battery:
    --snip--
    def get_range(self):
        """Print a statement about the range this bat
        if self.battery_size == 40:            range = 150
        elif self.battery_size == 65:
            range = 225
        print(f"This car can go about {range} miles o
class ElectricCar(Car):
    --snip--
my_leaf = ElectricCar('nissan', 'leaf', 2024)
print(my_leaf.get_descriptive_name())
my_leaf.battery.describe_battery()
❶ my_leaf.battery.get_range()
The new method get_range()  performs some simple analysis. If the
battery’ s capacity is 40 kWh, get_range()  sets the range to 150 miles,
and if the capacity is 65 kWh, it sets the range to 225 miles. It then reports