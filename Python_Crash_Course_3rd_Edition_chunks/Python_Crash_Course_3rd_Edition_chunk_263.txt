s of bullets
Deleting Old Bullets
At the moment, the bullets disappear when they reach the top, but only
because Pygame can’ t draw them above the top of the screen. The bullets
actually continue to exist; their y-coordinate values just grow increasingly
negative. This is a problem because they continue to consume memory and
processing power .
We need to get rid of these old bullets, or the game will slow down from
doing so much unnecessary work. To do this, we need to detect when thebottom  value of a bullet’ s rect  has a value of 0, which indicates the
bullet has passed of f the top of the screen:
alien_invasion.py
    def run_game(self):
        """Start the main loop for the game."""
        while True:
            self._check_events()
            self.ship.update()
            self.bullets.update()
            # Get rid of bullets that have disappeare
❶             for bullet in self.bullets.copy():
❷                 if bullet.rect.bottom <= 0:
❸                     self.bullets.remove(bullet)
❹             print(len(self.bullets))
            self._update_screen()
            self.clock.tick(60)
When you use a for  loop with a list (or a group in Pygame), Python
expects that the list will stay the same length as long as the loop is running.
That means you can’ t remove items from a list or group within a for  loop,
so we have to loop over a copy of the group. We use the copy()  method
to set up the for  loop ❶, which leaves us free to modify the originalbullets  group inside the loop. We check each bullet to see whether it has
disappeared of f the top of the screen ❷. If it has, we remove it from
bullets  ❸. We insert a print()  call to show how many bullets
currently exist in the game and verify they’re being deleted when they reach
the top of the screen ❹.
If this code works correctly , we can watch the terminal output while firing
bullets and see that the number of bullets decreases to zero after each series
of bullets has cleared the top of the screen. Af