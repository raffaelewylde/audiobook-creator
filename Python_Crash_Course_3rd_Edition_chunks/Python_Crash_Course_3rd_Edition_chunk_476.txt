les to the repository and check the status again:
❶ git_practice$ git add .
❷ git_practice$ git status
On branch main
No commits yet
Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
❸       new file:   .gitignore
      new file:   hello_git.py
git_practice$
The command git add .  adds to the repository all files within a project
that aren’ t already being tracked ❶, as long as they’re not listed in
.gitignor e. It doesn’ t commit the files; it just tells Git to start paying
attention to them. When we check the status of the project now , we can see
that Git recognizes some changes that need to be committed ❷. The label
new file  means these files were newly added to the repository ❸.Making a Commit
Let’s make the first commit:
❶ git_practice$ git commit -m "Started project."
❷ [main (root-commit) cea13dd] Started project.
❸ 2 files changed, 5 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 hello_git.py
❹ git_practice$ git status
On branch main
nothing to commit, working tree clean
git_practice$
We issue the command git commit -m " message" ❶ to make a
snapshot of the project. The -m flag tells Git to record the message that
follows (Started project.) in the project’ s log. The output shows that
we’re on the main  branch ❷ and that two files have changed ❸.
When we check the status now , we can see that we’re on the main  branch,
and we have a clean working tree ❹. This is the message you should see
each time you commit a working state of your project. If you get a dif ferent
message, read it carefully; it’ s likely you for got to add a file before making
a commit.Checking the Log
Git keeps a log of all commits made to the project. Let’ s check the log:
git_practice$ git log
commit cea13ddc51b885d05a410201a54faf20e0d2e246 (HEAD
Author: eric <eric@example.com>
Date:   Mon Jun 6 19:37:26 2022 -0800
    Started project.
git_practice$
Each time you make a commit, Git generates a unique, 40-character
reference ID. It records who mad