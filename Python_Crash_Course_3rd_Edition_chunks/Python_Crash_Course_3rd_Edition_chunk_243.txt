ssign this color to
self.bg_color  ❶.
We fill the screen with the background color using the fill()  method ❷,
which acts on a surface and takes only one ar gument: a color .
Creating a Settings Class
Each time we introduce new functionality into the game, we’ll typically
create some new settings as well. Instead of adding settings throughout the
code, let’ s write a module called settings  that contains a class called
Settings  to store all these values in one place. This approach allows us
to work with just one settings  object anytime we need to access an
individual setting. This also makes it easier to modify the game’ s
appearance and behavior as our project grows. To modify the game, we’ll
change the relevant values in settings.py , which we’ll create next, instead of
searching for dif ferent settings throughout the project.Create a new file named settings.py  inside your alien_invasion folder , and
add this initial Settings  class:
settings.py
class Settings:
    """A class to store all settings for Alien Invasi
    def __init__(self):
        """Initialize the game's settings."""
        # Screen settings
        self.screen_width = 1200
        self.screen_height = 800
        self.bg_color = (230, 230, 230)
To make an instance of Settings  in the project and use it to access our
settings, we need to modify alien_invasion.py  as follows:
alien_invasion.py
--snip--
import pygame
from settings import Settingsclass AlienInvasion:
    """Overall class to manage game assets and behavi
    def __init__(self):
        """Initialize the game, and create game resou
        pygame.init()
        self.clock = pygame.time.Clock()
❶         self.settings = Settings()
❷         self.screen = pygame.display.set_mode(
            (self.settings.screen_width, self.setting
        pygame.display.set_caption("Alien Invasion")
    def run_game(self):
            --snip--
            # Redraw the screen during each pass thro
❸             self.screen.fill(self.settings.bg_color