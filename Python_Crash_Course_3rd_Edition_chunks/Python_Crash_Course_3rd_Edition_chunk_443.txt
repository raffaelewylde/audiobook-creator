e to send the
request.
Make a new folder called .platform , in the same directory as manage.py .
Make sure you include the dot at the beginning of the name. Inside that
folder , make a file called routes.yaml  and enter the following:
.platform/r outes.yaml
# Each route describes how an incoming URL will be pr
"https://{default}/":
    type: upstream
    upstream: "ll_project:http"
"https://www.{default}/":
    type: redirect
    to: "https://{default}/"
This file makes sure requests like https://pr oject_url.com  and
www .project_url.com  all get routed to the same place.The services.yaml Configuration File
This last configuration file specifies services that our project needs in order
to run. Save this file in the .platform/  directory , alongside routes.yaml :
.platform/services.yaml
# Each service listed will be deployed in its own con
#   Platform.sh project.
db:
    type: postgresql:12
    disk: 1024
This file defines one service, a Postgres database.
Modifying settings.py for  Platform.sh
Now we need to add a section at the end of settings.py  to modify some
settings for the Platform.sh environment. Add this code to the very end of
settings.py :
settings.py--snip--
# Platform.sh settings.
❶ from platformshconfig import Config
config = Config()
❷ if config.is_valid_platform():
❸     ALLOWED_HOSTS.append('.platformsh.site')
❹     if config.appDir:
        STATIC_ROOT = Path(config.appDir) / 'static'
❺     if config.projectEntropy:
        SECRET_KEY = config.projectEntropy
    if not config.in_build():
❻         db_settings = config.credentials('database')
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgre
                'NAME': db_settings['path'],
                'USER': db_settings['username'],
                'PASSWORD': db_settings['password'],
                'HOST': db_settings['host'],
                'PORT': db_settings['port'],
            },
        }We normally place import  statements at the beginn