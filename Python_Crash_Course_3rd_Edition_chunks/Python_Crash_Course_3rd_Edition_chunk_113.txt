.items():
    print(f"\nKey: {key}")
    print(f"Value: {value}")
To write a for  loop for a dictionary , you create names for the two
variables that will hold the key and value in each key-value pair . You can
choose any names you want for these two variables. This code would work
just as well if you had used abbreviations for the variable names, like this:
for k, v in user_0.items()
The second half of the for  statement includes the name of the dictionary
followed by the method items() , which returns a sequence of key-value
pairs. The for  loop then assigns each of these pairs to the two variables
provided. In the preceding example, we use the variables to print each
key , followed by the associated value . The "\n"  in the first
print()  call ensures that a blank line is inserted before each key-value
pair in the output:
Key: username
Value: efermiKey: first
Value: enrico
Key: last
Value: fermi
Looping through all key-value pairs works particularly well for dictionaries
like the favorite_languages.py  example on page 96 , which stores the same
kind of information for many dif ferent keys. If you loop through the
favorite_languages  dictionary , you get the name of each person in
the dictionary and their favorite programming language. Because the keys
always refer to a person’ s name and the value is always a language, we’ll
use the variables name  and language  in the loop instead of key  and
value . This will make it easier to follow what’ s happening inside the
loop:
favorite_languages.py
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'rust',
    'phil': 'python',
    }for name, language in favorite_languages.items():
    print(f"{name.title()}'s favorite language is {la
This code tells Python to loop through each key-value pair in the dictionary .
As it works through each pair the key is assigned to the variable name , and
the value is assigned to the variable language . These descriptive names
make it much easier to see what the 