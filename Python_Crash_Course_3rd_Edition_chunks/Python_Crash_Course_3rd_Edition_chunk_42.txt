 example shows how you can use a one-line string to
generate four lines of output:
>>> print("Languages:\n\tPython\n\tC\n\tJavaScript")
Languages:
    Python
    C
    JavaScript
Newlines and tabs will be very useful in the next two chapters, when you
start to produce many lines of output from just a few lines of code.
Stripping Whitespace
Extra whitespace can be confusing in your programs. To programmers,
'python'  and 'python '  look pretty much the same. But to a
program, they are two dif ferent strings. Python detects the extra space in
'python '  and considers it significant unless you tell it otherwise.
It’s important to think about whitespace, because often you’ll want to
compare two strings to determine whether they are the same. For example,
one important instance might involve checking people’ s usernames when
they log in to a website. Extra whitespace can be confusing in much simplersituations as well. Fortunately , Python makes it easy to eliminate extra
whitespace from data that people enter .
Python can look for extra whitespace on the right and left sides of a string.
To ensure that no whitespace exists at the right side of a string, use the
rstrip()  method:
❶ >>> favorite_language = 'python '
❷ >>> favorite_language
'python '
❸ >>> favorite_language.rstrip()
'python'
❹ >>> favorite_language
'python '
The value associated with favorite_language  ❶ contains extra
whitespace at the end of the string. When you ask Python for this value in a
terminal session, you can see the space at the end of the value ❷. When the
rstrip()  method acts on the variable favorite_language  ❸, this
extra space is removed. However , it is only removed temporarily . If you ask
for the value of favorite_language  again, the string looks the same as
when it was entered, including the extra whitespace ❹.
To remove the whitespace from the string permanently , you have to
associate the stripped value with the variable name:>>> favorite_language = 'python '
❶ >>> favorite_language