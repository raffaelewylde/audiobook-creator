ds base.html , so it has the same base structure as the rest
of the pages in Learning Log. We use the <form></form>  tags to define
an HTML  form ❶. The action  argument tells the browser where to send
the data submitted in the form; in this case, we send it back to the view
function new_topic() . The method  argument tells the browser to
submit the data as a POST  request.
Django uses the template tag {% csrf_token %}  ❷ to prevent attackers
from using the form to gain unauthorized access to the server . (This kind of
attack is called a cross-site r equest for gery.) Next, we display the form; here
you can see how simple Django can make certain tasks, such as displaying
a form. We only need to include the template variable {{ form.as_div
}} for Django to create all the fields necessary to display the form
automatically ❸. The as_div  modifier tells Django to render all the form
elements as HTML  <div></div>  elements; this is a simple way to
display the form neatly .
Django doesn’ t create a submit button for forms, so we define one before
closing the form ❹.
Linking to the new_topic Page
Next, we include a link to the new_topic  page on the topics  page:
topics.html{% extends "learning_logs/base.html" %}
{% block content %}
  <p>Topics</p>
  <ul>
    --snip--
  </ul>
  <a href="{% url 'learning_logs:new_topic' %}">Add a
{% endblock content %}
Place the link after the list of existing topics. Figure 19-1  shows the
resulting form; try using the form to add a few new topics of your own.Figure 19-1 : The page for adding a new topic
Adding New Entries
Now that the user can add a new topic, they’ll want to add new entries too.
We’ll again define a URL, write a view function and a template, and link to
the page. But first, we’ll add another class to forms.py .
The Entry ModelForm
We need to create a form associated with the Entry  model, but this time,
with a bit more customization than TopicForm :
forms.pyfrom django import forms
from .models import Topic, Entry
class 