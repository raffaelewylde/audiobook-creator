u use pop() , the item you work with is no
longer stored in the list.
If you’re unsure whether to use the del  statement or the pop()  method,
here’ s a simple way to decide: when you want to delete an item from a list
and not use that item in any way , use the del  statement; if you want to use
an item as you remove it, use the pop()  method.
Removing an Item by Value
Sometimes you won’ t know the position of the value you want to remove
from a list. If you only know the value of the item you want to remove, you
can use the remove()  method.
For example, say we want to remove the value 'ducati'  from the list of
motorcycles:motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']
print(motorcycles)
motorcycles.remove('ducati')
print(motorcycles)
Here the remove()  method tells Python to figure out where 'ducati'
appears in the list and remove that element:
['honda', 'yamaha', 'suzuki', 'ducati']
['honda', 'yamaha', 'suzuki']
You can also use the remove()  method to work with a value that’ s being
removed from a list. Let’ s remove the value 'ducati'  and print a reason
for removing it from the list:
❶ motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']
print(motorcycles)
❷ too_expensive = 'ducati'
❸ motorcycles.remove(too_expensive)
print(motorcycles)
❹ print(f"\nA {too_expensive.title()} is too expensive After defining the list ❶, we assign the value 'ducati'  to a variable
called too_expensive  ❷. We then use this variable to tell Python which
value to remove from the list ❸. The value 'ducati'  has been removed
from the list ❹ but is still accessible through the variable
too_expensive , allowing us to print a statement about why we removed
'ducati'  from the list of motorcycles:
['honda', 'yamaha', 'suzuki', 'ducati']
['honda', 'yamaha', 'suzuki']
A Ducati is too expensive for me.
NOTE
The remove()  method deletes only the first occurr ence of the
value you specify . If ther e’s a possibility the value appears mor e
than once in the list, you’ll need to use a loo