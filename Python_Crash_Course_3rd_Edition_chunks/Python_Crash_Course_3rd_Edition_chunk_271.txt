factoring _cr eate_fleet()
If the code we’ve written so far was all we needed to create a fleet, we’d
probably leave _create_fleet()  as is. But we have more work to do,
so let’ s clean up the method a bit. We’ll add a new helper method,
_create_alien() , and call it from _create_fleet() :
alien_invasion.py
    def _create_fleet(self):
        --snip--
        while current_x < (self.settings.screen_width
            self._create_alien(current_x)
            current_x += 2 * alien_width
❶     def _create_alien(self, x_position):
        """Create an alien and place it in the row.""
        new_alien = Alien(self)
        new_alien.x = x_position
        new_alien.rect.x = x_position
        self.aliens.add(new_alien)
The method _create_alien()  requires one parameter in addition to
self : the x-value that specifies where the alien should be placed ❶. The
code in the body of _create_alien()  is the same code that was in_create_fleet() , except we use the parameter name x_position  in
place of current_x . This refactoring will make it easier to add new rows
and create an entire fleet.
Adding Rows
To finish the fleet, we’ll keep adding more rows until we run out of room.
We’ll use a nested loop—we’ll wrap another while  loop around the
current one. The inner loop will place aliens horizontally in a row by
focusing on the aliens’  x-values. The outer loop will place aliens vertically
by focusing on the y-values. We’ll stop adding rows when we get near the
bottom of the screen, leaving enough space for the ship and some room to
start firing at the aliens.
Here’ s how to nest the two while  loops in _create_fleet() :
    def _create_fleet(self):
        """Create the fleet of aliens."""
        # Create an alien and keep adding aliens unti
        # Spacing between aliens is one alien width a
        alien = Alien(self)
❶         alien_width, alien_height = alien.rect.size
❷         current_x, current_y = alien_width, alien_hei
❸         while current_y < (self.settings.s