message = input("Tell me something, and I will repeat
print(message)
The input()  function takes one ar gument: the prompt  that we want to
display to the user , so they know what kind of information to enter . In this
example, when Python runs the first line, the user sees the prompt Tell
me something, and I will repeat it back to you: . The
program waits while the user enters their response and continues after the
user presses ENTER. The response is assigned to the variable message ,
then print(message)  displays the input back to the user:Tell me something, and I will repeat it back to you: 
Hello everyone!
NOTE
Some text editors won’ t run pr ograms that pr ompt the user for input.
You can use these editors to write pr ograms that pr ompt for input,
but you’ll need to run these pr ograms fr om a terminal. See
“Running Python Pr ograms fr om a T erminal ” on page 1 1.
Writing Clear  Prompts
Each time you use the input()  function, you should include a clear ,
easy-to-follow prompt that tells the user exactly what kind of information
you’re looking for . Any statement that tells the user what to enter should
work. For example:
greeter .py
name = input("Please enter your name: ")print(f"\nHello, {name}!")
Add a space at the end of your prompts (after the colon in the preceding
example) to separate the prompt from the user ’s response and to make it
clear to your user where to enter their text. For example:
Please enter your name: Eric
Hello, Eric!
Sometimes you’ll want to write a prompt that’ s longer than one line. For
example, you might want to tell the user why you’re asking for certain
input. You can assign your prompt to a variable and pass that variable to the
input()  function. This allows you to build your prompt over several
lines, then write a clean input()  statement.
greeter .py
prompt = "If you share your name, we can personalize 
prompt += "\nWhat is your first name? "
name = input(prompt)
print(f"\nHello, {name}!")This example shows one way to build 