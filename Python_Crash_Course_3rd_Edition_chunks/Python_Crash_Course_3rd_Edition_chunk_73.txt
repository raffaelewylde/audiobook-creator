the range()  function to print a series of
numbers like this:
first_numbers.py
for value in range(1, 5):
    print(value)
Although this code looks like it should print the numbers from 1 to 5, it
doesn’ t print the number 5:
1
23
4
In this example, range()  prints only the numbers 1 through 4. This is
another result of the of f-by-one behavior you’ll see often in programming
languages. The range()  function causes Python to start counting at the
first value you give it, and it stops when it reaches the second value you
provide. Because it stops at that second value, the output never contains the
end value, which would have been 5 in this case.
To print the numbers from 1 to 5, you would use range(1, 6) :
for value in range(1, 6):
    print(value)
This time the output starts at 1 and ends at 5:
1
2
3
4
5
If your output is dif ferent from what you expect when you’re using
range() , try adjusting your end value by 1.You can also pass range()  only one ar gument, and it will start the
sequence of numbers at 0. For example, range(6)  would return the
numbers from 0 through 5.
Using range() to Make a List of Numbers
If you want to make a list of numbers, you can convert the results of
range()  directly into a list using the list()  function. When you wrap
list()  around a call to the range()  function, the output will be a list
of numbers.
In the example in the previous section, we simply printed out a series of
numbers. We can use list()  to convert that same set of numbers into a
list:
numbers = list(range(1, 6))
print(numbers)
This is the result:
[1, 2, 3, 4, 5]
We can also use the range()  function to tell Python to skip numbers in a
given range. If you pass a third ar gument to range() , Python uses that
value as a step size when generating numbers.For example, here’ s how to list the even numbers between 1 and 10:
even_numbers.py
even_numbers = list(range(2, 11, 2))
print(even_numbers)
In this example, the range()  function starts with the value 2 and then
adds 2 to