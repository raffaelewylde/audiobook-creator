 create an instance of the class Clock , from
the pygame.time  module. Then we’ll make the clock tick at the end ofthe while  loop in run_game() :
    def run_game(self):
        """Start the main loop for the game."""
        while True:
            --snip--
            pygame.display.flip()
            self.clock.tick(60)
The tick()  method takes one ar gument: the frame rate for the game.
Here I’m using a value of 60, so Pygame will do its best to make the loop
run exactly 60 times per second.
NOTE
Pygame’ s clock should help the game run consistently on most
systems. If it makes the game run less consistently on your system,
you can try differ ent values for the frame rate. If you can’ t find a
good frame rate on your system, you can leave the clock out entir ely
and adjust the game’ s settings so it runs well on your system.Setting the Backgr ound Color
Pygame creates a black screen by default, but that’ s boring. Let’ s set a
different background color . We’ll do this at the end of the __init__()
method.
alien_invasion.py
    def __init__(self):
        --snip--
        pygame.display.set_caption("Alien Invasion")
        # Set the background color.
❶         self.bg_color = (230, 230, 230)
    def run_game(self):
        --snip--
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    sys.exit()
            # Redraw the screen during each pass thro
❷             self.screen.fill(self.bg_color)
            # Make the most recently drawn screen vis            pygame.display.flip()
            self.clock.tick(60)
Colors in Pygame are specified as RGB colors: a mix of red, green, and
blue. Each color value can range from 0 to 255. The color value (255, 0,
0) is red, (0, 255, 0)  is green, and (0, 0, 255)  is blue. You can
mix dif ferent RGB values to create up to 16 million colors. The color value
(230, 230, 230)  mixes equal amounts of red, blue, and green, which
produces a light gray background color . We a